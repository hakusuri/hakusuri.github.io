<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>吐槽日记</title>
      <link href="/2025/02/27/%E5%90%90%E6%A7%BD%E6%97%A5%E8%AE%B0/"/>
      <url>/2025/02/27/%E5%90%90%E6%A7%BD%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="2025-02-27"><a href="#2025-02-27" class="headerlink" title="2025-02-27"></a>2025-02-27</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;现在是开学第四天，百般纠结中开始写下本文。本来是打算用来研究开题报告写什么东西的，原先的博客系统被毙掉了，又要重头开始想，纠结。。。<br>&nbsp;&nbsp;&nbsp;&nbsp;总之先来回顾最近的事，话说如此，本文就是用来记录近期生活和感悟的，嗯没错。首先是昨天也就是 26 号 6 级结果出来，虽然考完感觉还不错，甚至认为这次稳了，毕竟可是背了 3 个月的单词，阅读也随便看懂，不过也就只限于阅读了。但与此同时，心里还是像以前一样压低预期，这样到时候真过了也会更高兴？感觉像是自己骗自己，强行给自己惊喜，一直以来养成的坏毛病吧。最搞的是有个罕见一大早查分一看 423，嘿嘿，本来想嘲笑的，转念一想，万一自己没过怎么办？这天还是周三有个该死的形策早八。总之七点半爬起来后，还是没忍住，上官网查分，然后————423？这下笑不出来了，听力一如既往 108，写作更是写的一坨只有 111，还幻想过这次写作能高一点。。。能有 423 全靠阅读 204，只能说是唯一的慰藉了 😭😭😭😭😭<br>&nbsp;&nbsp;&nbsp;&nbsp;然后是回归本文最开始的动机————作为搭建博客后的第一篇日记，本想记录 2025 年一月 10 日放假至开学的生活作为一个新的开始，由于各种原因，绝对不是我懒（，拖到了现在，今天能写也是念叨了好几天，加上自己疯了一样的所谓不能浪费时间。还有一点，感觉现在已经快想不起来放假干啥了，所以也就写个大概吧。。<br>&nbsp;&nbsp;&nbsp;&nbsp;没记错的话回去应该先是玩了《密语》，女主也就是男主的妹妹，有个假名是叫夜空来着，真名无所谓，总让我想起《我的朋友很少》里面的黑长直三日月夜空（似乎只有两条线，一条是和伪装成网友夜空的妹妹疯狂 do，虽然都玩妹系了，但总感觉每次代入一下还是跨不过那条线，一想到要面对那么大的社会舆论压力，已经退缩了，嗯，我就是胆小鬼。总之选的另一条当妹妹看待，虽然最后结局还是大 do 特 do 了，但这条线是两人直面对方和自己的内心的，比起一时的情欲，这才是真正的 he，嗯没错。其实吧我觉得，如果是真心喜欢的，就这样两个人跑到陌生的地方，两个人一起生活，也不论结不结婚什么的，比起社会意义上的约定，二人事实上的同居生活也很幸福吧。当然，这也可以说是胆小鬼的逃避罢了，呵呵，我就是这样的人呢，所以什么时候能遇到喜欢的人呢。。。<br>&nbsp;&nbsp;&nbsp;&nbsp;总之密语也不是很长，打完 te 看了下 b 站上面的评价，大致了解了另一条线，也就不想玩了。后面也闲来无事，开始看看计算机网络，研究了一下 github，及记笔记，然后把笔记同步到上面，玩玩游戏。那几天应该是把鸣潮 2.0 版本的地图活动什么的玩完，没两下就没东西可玩了。然后想起一直想玩的拔作岛，先不管 steam 上面多少钱，总之先去下盗版看看剧情。然后下了破解版官中，玩了十来个小时，我测，怎么那么有意思，我想玩的游戏就是这样的游戏啊，能让我笑出来，觉得有意思。遂取 steam 上看正版，你猜怎么着，刚好打折，带上 2 的捆绑包才 95，买！后面打上补丁，发现官中的存档和盗版的存档是通用的，接着爽完，嘻嘻。第一部玩完大概 28 个小时全 cg，后面就是过年那两天吧，也就没玩啥。初一被带到到洛阳，一直想去的来着，真过去了发现和西安没啥区别，也可能是没去城墙那边吧，总之在酒店睡了一晚，初二告诉我本来还要往东边开去开封，现在不去了，去老君山，又让我抉择，最讨厌抉择了，一有个啥还要我担责，总之就是有心理压力。最后还是去了南边的老君山，开了两个小时还是多久的车，到了，然后告诉我没票了，我。。。哈哈，这下去开封的路更远了，直接打道回府，下午三点到家。初三又去了高陵区来着，早上九十点吃了个拉面，然后去昭惠广场，里面就一个三星级博物馆，一座塔，逛完回去两点多吧。后面我爸再要出去我就没去了，好好放个假躺屋里多舒服，平常上班现在放假还不休息，无语。再后面是 2 号左右吧，研究了一天 blog，那个逼 html 样式真是恶心到我了，研究一晚上没整明白，直接暂时搁置。然后花了一天写了个拔作岛感悟，等博客搭好传上去，再然后就是接着学计算机网络，本来打算的就是寒假学完的，不过记笔记好麻烦啊，又是拖了好久，总之在开学前断断续续学完了。<br>&nbsp;&nbsp;&nbsp;&nbsp;在一个就是玩拔作岛 2 了，全 cg 收集完 steam 上面 30 个小时，想写一个感悟的，但无奈于懒惰，这里就先简单写一点。2 里面主要就是 FS 三巨头的个人，总之先玩了会长也就是桐香，由于第一条线，观感拉满，桐香也很可爱，真是的，这种时候就很想要女朋友。桐香就是想要与他人互相理解，却不善表达；礼学姐则是被迫践踏他人纯爱而上位，觉得自己不配拥有纯爱，后被雏见救赎；郁子则是幼时嫉妒自己的弟弟，弟弟意外死后被当成男孩子养育，后面只剩下自己被岛接纳，性压抑了属于是（<br>不过这三条线只有礼没有多年后的 CG，是什么意思呢，还要会长还有女儿的剧情，我测，这才是真女主吧，女儿真可爱。其余还有一代主角的后日谈加上妹妹线，基本都认真看了，除了紫毛胖子，2 里面的剧情就整一个颠婆，看着无语。。。差不多就这样吧，剩下的等找个时间写个完整版，总觉得会是很久以后了，在学校总感觉放不开，有人看着一样。<br>&nbsp;&nbsp;&nbsp;&nbsp;再然后就是把 blog 搭建出来，又爽玩了三四天滚回学校，准备考研。中间还是出去玩了好几次，吃烧烤，去网吧，去 ktv，总之这个寒假是最充实的一会，玩够了，也学了个计网，希望后面的假期也能这样。。<br>&nbsp;&nbsp;&nbsp;&nbsp;总之这次就先这样了，后面还会有记录看过的作品，应该会新开一个页面。明天又有早八，还是潘勇浩的，和这种表面上和善实则严厉的老师处不来，因为和善是对大家，而不是我个人。总之开题报告什么的就交给明天了，现在已经十一点了，单词还没背，快来不及了，又要备战六级喽</p>]]></content>
      
      
      <categories>
          
          <category> personality </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 纪实 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用层</title>
      <link href="/2025/02/22/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>/2025/02/22/%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a><center>应用层</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><pre><code>应用层是计算机网络体系结构的最顶层，是设计和建立计算机网络的最终目的，也是计算机网络中发展最快的部分：    a、早期基于文本的应用（电子邮件、远程登录、文件传输、新闻组）    b、20世纪90年代将因特网带入干家万户的万维网WWW    c、当今流行的即时通信、P2P文件共享及各种音视频应用    d、计算设备的小型化和“无处不在”，宽带住宅接入和无线接入的日益普及和迅速发展，为未来更多的新型应用提供了广阔的舞台。</code></pre><span id="more"></span><h2 id="客户-服务器方式-C-S-方式-和对等方式-P2P-方式"><a href="#客户-服务器方式-C-S-方式-和对等方式-P2P-方式" class="headerlink" title="客户&#x2F;服务器方式(C&#x2F;S 方式)和对等方式(P2P 方式)"></a>客户&#x2F;服务器方式(C&#x2F;S 方式)和对等方式(P2P 方式)</h2><pre><code>a、网络应用程序运行在处于网络边缘的不同的端系统上，通过彼此间的通信来共同完成某项任务。b、开发一种新的网络应用首先要考虑的问题就是网络应用程序在各种端系统上的组织方式和它们之间的关系。c、目前流行的主要有以下两种：    (1)客户/服务器(Client/Server，C/S)方式。    (2)对等(Peer-to-Peer,P2P)方式。</code></pre><h4 id="1、客户-服务器-Client-Server-C-S-方式："><a href="#1、客户-服务器-Client-Server-C-S-方式：" class="headerlink" title="1、客户&#x2F;服务器(Client&#x2F;Server,C&#x2F;S)方式："></a>1、客户&#x2F;服务器(Client&#x2F;Server,C&#x2F;S)方式：</h4><pre><code>a、客户和服务器是指通信中所涉及的两个应用进程。b、客户/服务器方式所描述的是进程之间服务和被服务的关系。c、客户是服务请求方，服务器是服务提供方。d、服务器总是处于运行状态，并等待客户的服务请求。服务器具有固定端口号（例如HTTP服务器的默认端口号为80），而运行服务器的主机也具有固定的IP地址。e、C/S方式是因特网上传统的、同时也是最成熟的方式，很多我们熟悉的网络应用采用的都是C/S方式。包括万维网WWW、电子邮件、文件传输FTP等。f、基于C/S方式的应用服务通常是服务集中型的，即应用服务集中在网络中比客户计算机少得多的服务器计算机上：    (1)由于一台服务器计算机要为多个客户机提供服务，在C/S应用中，常会出现服务器计算机跟不上众多客户机请求的情况。    (2)为此，在C/S应用中，常用计算机群集（或服务器场）构建一个强大的虚拟服务器。</code></pre><h4 id="2、对等-Peer-to-Peer，P2P-方式"><a href="#2、对等-Peer-to-Peer，P2P-方式" class="headerlink" title="2、对等(Peer-to-Peer，P2P)方式"></a>2、对等(Peer-to-Peer，P2P)方式</h4><pre><code>a、在P2P方式中，没有固定的服务请求者和服务提供者，分布在网络边缘各端系统中的应用进程是对等的，被称为对等方。对等方相互之间直接通信，每个对等方既是服务的请求者，又是服务的提供者。b、目前，在因特网上流行的P2P应用主要包括P2P文件共享、即时通信、P2P流媒体、分布式存储等。c、基于P2P的应用是服务分散型的，因为服务不是集中在少数几个服务器计算机中，而是分散在大量对等计算机中，这些计算机并不为服务提供商所有，而是为个人控制的桌面计算机和笔记本电脑，它们通常位于住宅、校园和办公室中。d、P2P方式的最突出特性之一就是它的可扩展性。因为系统每增加一个对等方，不仅增加的是服务的请求者，同时也增加了服务的提供者，系统性能不会因规模的增大而降低。e、P2P方式具有成本上的优势，因为它通常不需要庞大的服务器设施和服务器带宽。为了降低成本，服务提供商对于将P2P方式用于应用的兴趣越来越大。</code></pre><h2 id="动态主机配置协议-DHCP"><a href="#动态主机配置协议-DHCP" class="headerlink" title="动态主机配置协议 DHCP"></a>动态主机配置协议 DHCP</h2><pre><code>a、动态主机配置协议DHCP(Dynamic Host Configuration Protocol)提供了一种机制，称为即插即用连网。这种机制允许一台计算机加入新网络时可自动获取IP地址、网关、子网掩码、DNS服务器等网络配置信息而不用手工参与。b、DHCP主要使用以下报文来实现其功能：    (1)DHCP DISCOVER:DHCP发现报文    (2)DHCP OFFER:DHCP提供报文    (3)DHCP REQUEST:DHCP请求报文    (4)DHCP ACK:DHCP确认报文    (5)DHCP NACK:DHCP否认报文    (6)DHCP RELEASE:DHCP释放报文c、DHCP报文在运输层使用UDP协议封装：    (1)DHCP客户使用的UDP端口号为68    (2)DHCP服务器使用的UDP端口号为67d、DHCP客户在未获取到IP地址时使用地址0.0.0.0e、在每一个网络上都设置一个DHCP服务器会使DHCP服务器的数量太多。因此现在是使每一个网络至少有一个DHCP中继代理（通常是一台路由器），它配置了DHCP服务器的IP地址信息，作为各网络中计算机与DHCP服务器的桥梁。</code></pre><h4 id="1、-DHCP-协议的工作原理："><a href="#1、-DHCP-协议的工作原理：" class="headerlink" title="1、 DHCP 协议的工作原理："></a>1、 DHCP 协议的工作原理：</h4><pre><code>a、DHCP协议基于客户端-服务器架构，通常包含两个角色：    (1)DHCP服务器：负责管理和分配IP地址以及其他网络配置信息。    (2)DHCP客户端：请求IP地址并接受配置的设备（如计算机、手机等）。b、当新设备连接到网络时，DHCP客户端会自动向DHCP服务器请求IP地址和其他配置信息。DHCP服务器从可用地址池中选择一个IP地址，并将其分配给客户端，同时还提供其他相关的网络信息。这一过程使设备在网络中获得所需的连接参数，完成网络接入。c、地址池：地址池是DHCP服务器用于分配的IP地址范围。网络管理员可以在DHCP服务器上定义一个地址池，并设定IP地址的分配策略。地址池的合理配置确保了网络中每个设备都能获取到有效的IP地址。</code></pre><h4 id="2、DHCP-的工作流程：DHCP-的工作流程主要包括四个阶段，即-DORA-流程：Discover（发现）、Offer（提供）、Request（请求）和-Acknowledge（确认）："><a href="#2、DHCP-的工作流程：DHCP-的工作流程主要包括四个阶段，即-DORA-流程：Discover（发现）、Offer（提供）、Request（请求）和-Acknowledge（确认）：" class="headerlink" title="2、DHCP 的工作流程：DHCP 的工作流程主要包括四个阶段，即 DORA 流程：Discover（发现）、Offer（提供）、Request（请求）和 Acknowledge（确认）："></a>2、DHCP 的工作流程：DHCP 的工作流程主要包括四个阶段，即 DORA 流程：Discover（发现）、Offer（提供）、Request（请求）和 Acknowledge（确认）：</h4><pre><code>a、DHCP为TCP/IP体系中应用层的协议，其使用运输层UDP提供的服务，DHCP报文在运输层会被封装成为UDP用户数据报。b、寻找DHCP服务器：当客户主机启用DHCP后，将广播发送DHCP发现报文，封装有事务ID和DHCP客户端的MAC地址，其源IP地址为0.0.0.0，因为此时用户主机还未分配IP地址；目的IP地址为255.255.255.255，因为客户机不知道网络中的DHCP服务器IP；此时网络中的所有主机都会收到此广播报文，但因该报文的目的端口为67即DHCP服务进程，因此只有DHCP服务器会接收此报文。c、提供IP地址租用：服务器收到后，根据报文中的MAC地址查询自身数据库是否存在针对该MAC地址的配置信息，若有则使用这些配置信息构建DHCP提供报文；若没有，则采用默认配置信息构建。DHCP提供报文的源IP为DHCP服务器IP地址，目的地址为广播地址255.255.255.255，因为客户主机当前仍没有IP地址。该报文的目的端口为68，因此只有客户端会接收该报文，同时根据报文中的事务ID来判断该报文是否为自己所请求的报文。提供报文封装有事务ID、IP地址、子网掩码、地址租期、默认网关、DHCP服务器等信息；DHCP服务器从自己的IP地址池中挑选待租用给主机的IP地址时，会使用ARP来确保所选IP地址未被网络中其他主机占用。d、接收IP地址租用约：客户端收到提供报文后，向DHCP服务器发送DHCP请求报文。请求报文的源地址仍为0.0.0.0，因为客户端需要先征得服务器的同意才能使用服务器提供的IP地址。目的地址为广播地址，这样不用向网络中的每一个DHCP服务器单播发送DHCP请求报文。请求报文封装有事务ID、DHCP客户端的MAC地址、接受的租约中的IP地址、提供此租约的DHCP服务器端的IP地址等信息。e、确认IP地址租约：若服务器收到请求报文后接受该请求，则向客户端发送DHCP确认报文。确认报文的源IP为DHCP服务器IP地址，目的地址为广播地址255.255.255.255。客户端收到确认报文后，使用ARP检测所分配到的IP地址是否已被网络中其他主机占用：若被占用，给DHCP服务器发送“DHCP DECLINE”报文撤销IP地址租约，并重新发送“DHCP DISCOVER&quot;报文;若未被占用：可以使用租约中的IP地址与网络中其他主机通信了。</code></pre><h4 id="3、客户端更新租用期："><a href="#3、客户端更新租用期：" class="headerlink" title="3、客户端更新租用期："></a>3、客户端更新租用期：</h4><pre><code>a、当租用期过了一半时，DHCP客户会向DHCP服务器发送DHCP请求报文，请求更新租用期。该报文的源IP的地址为客户端被分配的IP地址，目的地址为DHCP服务器地址。b、若DHCP服务器同意，则发回确认报文，客户端收到后租期更新；若不同意，则发回DHCP否认报文，客户端收到后立即停止使用租用的IP地址井重新发送DHCP发现报文；若服务器未响应，则客户端在租期过了87.5%时，向DHCP服务器发送DHCP请求报文，继续等待服务器响应。c、若服务器持续未响应，则IP地址租用期到期后，客户端需立即停止使用租用的IP地址井重新发送DHCP发现报文重新申请IP地址。</code></pre><h4 id="4、DHCP-客户可以随时提前终止-DHCP-服务器所提供的租用期，这时只需向-DHCP-服务器发送-DHCP-释放报文段即可。该报文的源-IP-地址为-0-0-0-0，目的-IP-地址为-255-255-255-255。"><a href="#4、DHCP-客户可以随时提前终止-DHCP-服务器所提供的租用期，这时只需向-DHCP-服务器发送-DHCP-释放报文段即可。该报文的源-IP-地址为-0-0-0-0，目的-IP-地址为-255-255-255-255。" class="headerlink" title="4、DHCP 客户可以随时提前终止 DHCP 服务器所提供的租用期，这时只需向 DHCP 服务器发送 DHCP 释放报文段即可。该报文的源 IP 地址为 0.0.0.0，目的 IP 地址为 255.255.255.255。"></a>4、DHCP 客户可以随时提前终止 DHCP 服务器所提供的租用期，这时只需向 DHCP 服务器发送 DHCP 释放报文段即可。该报文的源 IP 地址为 0.0.0.0，目的 IP 地址为 255.255.255.255。</h4><h4 id="5、DHCP-中继代理："><a href="#5、DHCP-中继代理：" class="headerlink" title="5、DHCP 中继代理："></a>5、DHCP 中继代理：</h4><pre><code>a、一个网络中的DHCP主机无法向其他网络中的DHCP服务器申请IP地址，因为路由器不会转发广播报文。b、为减少DHCP服务器的数量，通过给路由器配置DHCP服务器的IP地址并使之成为DHCP中继代理。这样一个网络中的DHCP主机发送广播报文后，路由器即DHCP中继代理会将其单播转发给其配置的DHCP服务器，客户主机和服务器可通过该路由器交互。</code></pre><h2 id="域名系统-DNS-Domain-Name-System"><a href="#域名系统-DNS-Domain-Name-System" class="headerlink" title="域名系统 DNS(Domain Name System)"></a>域名系统 DNS(Domain Name System)</h2><pre><code>a、DNS（Domain Name System）是因特网的一项服务，它作为域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网。b、早在1983年，因特网就开始采用层次结构的命名树作为主机的名字（即域名），并使用分布式的域名系统DNS。DNS使大多数域名都在本地解析，仅少量解析需要在因特网上通信，因此系统效率很高。由于DNS是分布式系统，即使单个计算机出了故障，也不会妨碍整个系统的正常运行。c、DNS报文使用运输层的UDP协议进行封装，运输层端口号为53</code></pre><h4 id="1、域名的组成："><a href="#1、域名的组成：" class="headerlink" title="1、域名的组成："></a>1、域名的组成：</h4><pre><code>a、因特网采用层次树状结构的域名结构。b、域名的结构由若干个分量组成，各分量之间用“点”隔开，分别代表不同级别的域名。        ………….三级域名.二级域名.顶级域名    (1)每一级的域名都由英文字母和数字组成，不超过 63 个字符，不区分大小写字母。    (2)级别最低的域名写在最左边，而级别最高的顶级域名写在最右边。    (3)完整的域名不超过 255 个字符。c、域名系统既不规定一个域名需要包含多少个下级域名，也不规定每一级的域名代表什么意思。d、各级域名由其上一级的域名管理机构管理，而最高的顶级域名则由因特网名称与数字地址分配机构 ICANN 进行管理。e、这种按等级管理的命名方法便于维护名字的唯一性，并且也容易设计出一种高效的域名查询机制。需要注意的是，域名只是个逻辑概念，并不代表计算机所在的物理地点，</code></pre><h4 id="2、顶级域名-TLD-Top-Level-Domain-的分类："><a href="#2、顶级域名-TLD-Top-Level-Domain-的分类：" class="headerlink" title="2、顶级域名 TLD(Top Level Domain)的分类："></a>2、顶级域名 TLD(Top Level Domain)的分类：</h4><pre><code>a、国家顶级域名nTLD：采用ISO3166的规定。如cn表示中国，us表示美国，uk表示英国、等等。b、通用顶级域名gTLD：最常见的通用顶级域名有七个，即：com（公司企业）net（网络服务机构）、org（非营利性组织）、int（国际组织）、edu（美国教育结构）、gov（美国政府部门）、mil（美国军事部门）。c、反向域arpa：用于反向域名解析，即 IP 地址反向解析为域名。</code></pre><h4 id="3、二级域名："><a href="#3、二级域名：" class="headerlink" title="3、二级域名："></a>3、二级域名：</h4><pre><code>a、在国家顶级域名下注册的二级域名均由该国家自行确定。例如，顶级域名为jp的日本，将其教育和企业机构的二级域名定为ac和co，而不用edu和com。b、我国则将二级域名划分为以下两类：    (1)类别域名:共七个：ac（科研机构）、com（工、商、金融等企业）、edu(教育机构)、gov（政府部门）、net（提供网络服务的机构）、mil(军事机构)和org（非营利性组织）。    (2)行政区域名：共34个，适用于我国的各省、自治区、直辖市。例如：bj为北京市、sh为上海市、js为江苏省，等等。</code></pre><h4 id="4、域名和-IP-地址的映射关系必须保存在域名服务器中，供所有其他应用查询。显然不能将所有信息都储存在一台域名服务器中。DNS-使用分布在各地的域名服务器来实现域名到-IP-地址的转换。"><a href="#4、域名和-IP-地址的映射关系必须保存在域名服务器中，供所有其他应用查询。显然不能将所有信息都储存在一台域名服务器中。DNS-使用分布在各地的域名服务器来实现域名到-IP-地址的转换。" class="headerlink" title="4、域名和 IP 地址的映射关系必须保存在域名服务器中，供所有其他应用查询。显然不能将所有信息都储存在一台域名服务器中。DNS 使用分布在各地的域名服务器来实现域名到 IP 地址的转换。"></a>4、域名和 IP 地址的映射关系必须保存在域名服务器中，供所有其他应用查询。显然不能将所有信息都储存在一台域名服务器中。DNS 使用分布在各地的域名服务器来实现域名到 IP 地址的转换。</h4><h4 id="5、域名服务器的分类："><a href="#5、域名服务器的分类：" class="headerlink" title="5、域名服务器的分类："></a>5、域名服务器的分类：</h4><pre><code>a、根域名服务器：    根域名服务器是最高层次的域名服务器。每个根域名服务器都知道所有的顶级域名服务器的域名及其IP地址。因特网上共有13个不同IP地址的根域名服务器。尽管我们将这13个根域名服务器中的每一个都视为单个的服务器，但“每台服务器”实际上是由许多分布在世界各地的计算机构成的服务器群集。当本地域名服务器向根域名服务器发出查询请求时，路由器就把查询请求报文转发到离这个DNS客户最近的一个根域名服务器。这就加快了DNS的查询过程，同时也更合理地利用了因特网的资源。根域名服务器通常并不直接对域名进行解析，而是返回该域名所属顶级域名的顶级域名服务器的IP地址。b、顶级域名服务器：    这些域名服务器负责管理在该顶级域名服务器注册的所有二级域名。当收到 DNS 查询请求时就给出相应的回答：可能是最后的结果，也可能是下一级权限域名服务器的 IP 地址。c、权限域名服务器：    这些域名服务器负责管理某个区的域名。每一个主机的域名都必须在某个权限域名服务器处注册登记。因此权限域名服务器知道其管辖的域名与 IP 地址的映射关系。另外，权限域名服务器还知道其下级域名服务器的地址。二级及以下域名由权限域名路由器管理。d、本地域名服务器：    本地域名服务器不属于上述的域名服务器的等级结构。当一个主机发出 DNS 请求报文时，这个报文就首先被送往该主机的本地域名服务器。本地域名服务器起着代理的作用，会将该报文转发到上述的域名服务器的等级结构中。每一个因特网服务提供者 ISP，一个大学，甚一个大学里的学院，都可以拥有一个本地域名服务器，它有时也称为默认域名服务器。本地域名服务器离用户较近，一般不超过几个路由器的距离，也有可能就在同一个局域网中。本地域名服务器的 IP 地址需要直接配置在需要域名解析的主机中。</code></pre><h4 id="6、域名解析过程："><a href="#6、域名解析过程：" class="headerlink" title="6、域名解析过程："></a>6、域名解析过程：</h4><p>a、递归查询：当一个客户端（如用户的计算机）向其配置的 DNS 递归解析器发出域名查询请求时，该解析器承担起查找完整答案的责任，并以最终的 IP 地址响应客户端。递归解析器会依次查询多个 DNS 服务器，直到找到最终的权威答案。在整个过程中，客户端只需发送一次查询请求，之后的工作由递归解析器“递归”地完成。<br><img src="/images/QQ20250219-145148.png" alt="递归查询"><br>b、迭代查询：在迭代查询中，DNS 服务器不会直接给出最终答案，而是每次回应客户端时提供下一步应该查询的 DNS 服务器的信息。因此，客户端需要自己负责后续的查询工作，一步步接近最终答案。<br><img src="/images/QQ20250219-145253.png" alt="迭代查询"></p><h4 id="7、域名高速缓存："><a href="#7、域名高速缓存：" class="headerlink" title="7、域名高速缓存："></a>7、域名高速缓存：</h4><pre><code>a、为了提高DNS的查询效率，并减轻根域名服务器的负荷和减少因特网上的DNS查询报文数量，在域名服务器中广泛地使用了高速缓存。高速缓存用来存放最近查询过的域名以及从何处获得域名映射信息的记录。b、由于域名到IP地址的映射关系并不是永久不变，为保持高速缓存中的内容正确，域名服务器应为每项内容设置计时器并删除超过合理时间的项（例如，每个项目只存放两天）。c、不但在本地域名服务器中需要高速缓存，在用户主机中也很需要。许多用户主机在启动时从本地域名服务器下载域名和IP地址的全部数据库，维护存放自己最近使用的域名的高速缓存，并且只在从缓存中找不到域名时才向域名服务器查询。同理，主机也需要保持高速缓存中内容的正确性。</code></pre><h2 id="文件传输协议-FTP"><a href="#文件传输协议-FTP" class="headerlink" title="文件传输协议 FTP"></a>文件传输协议 FTP</h2><pre><code>a、将某台计算机中的文件通过网络传送到可能相距很远的另一台计算机中，是一项基本的网络应用，即文件传送。b、文件传送协议FTP(File Transfer Protocol)是因特网上使用得最广泛的文件传送协议。    (1)FTP提供交互式的访问，允许客户指明文件的类型与格式（如指明是否使用ASCII码），并允许文件具有存取权限（如访问文件的用户必须经过授权，并输入有效的口令）。    (2)FTP屏蔽了各计算机系统的细节，因而适合于在异构网络中任意计算机之间传送文件。c、在因特网发展的早期阶段，用FTP传送文件约占整个因特网的通信量的三分之一，而由电子邮件和域名系统所产生的通信量还要小于FTP所产生的通信量。只是到了1995年，万维网WWW的通信量才首次超过了FTP。d、文件传输协议（File Transfer Protocol，FTP）是用于在网络上进行文件传输的一套标准协议。它工作在 OSI 模型的第七层，TCP 模型的第四层，即应用层，使用 TCP 进行传输而不是 UDP。FTP 协议包括两个组成部分，其一为 FTP 服务器，其二为 FTP 客户端。其中 FTP 服务器用来存储文件，用户可以使用 FTP 客户端通过 FTP 协议访问这些文件。</code></pre><h4 id="1、-FTP-协议工作原理："><a href="#1、-FTP-协议工作原理：" class="headerlink" title="1、 FTP 协议工作原理："></a>1、 FTP 协议工作原理：</h4><pre><code>   FTP协议采用客户端/服务器工作模式。在开始文件传输之前，客户端和服务器之间需要建立连接，并进行身份验证。当连接建立并验证通过后，客户端可以向服务器发送命令来执行各种文件操作，如上传、下载、删除等。</code></pre><h4 id="2、FTP-的应用："><a href="#2、FTP-的应用：" class="headerlink" title="2、FTP 的应用："></a>2、FTP 的应用：</h4><pre><code>a、FTP的常见用途是在计算机之间传输文件，尤其是用于批量传输文件。b、FTP的另一个常见用途是让网站设计者将构成网站内容的大量文件批量上传到他们的Web服务器。</code></pre><h4 id="3、FTP-的工作原理："><a href="#3、FTP-的工作原理：" class="headerlink" title="3、FTP 的工作原理："></a>3、FTP 的工作原理：</h4><pre><code>a、主动模式：建立数据通道时，服务器主动连接客户。    (1)FTP服务器监听熟知端口号21，当TCP客户想要与服务器建立连接时，随机选择一个临时端口号发起TCP连接，该连接用于客户与服务器之间传送FTP控制命令，即命令通道。    (2)当有数据要传输时，客户通过命令通道告知服务器，服务器使用自己的熟知端口号20发起TCP连接，与客户另一个临时端口号建立连接，该连接用于客户与服务器之间传输文件，即数据通道。b、被动模式：建立数据通道时，FTP服务器被动等待FTP客户的连接。    (1)命令通道的建立与主动模式相同。    (2)当有数据要传输时，客户通过命令通道告知服务器，服务器使用某个协商好的临时端口号，被动等待客户连接。客户选择另一个临时端口号，发起TCP连接以建立数据通道。c、(3)控制连接在整个会话期间一直保持打开，用于传送FTP相关控制命令；数据连接用于文件传输，在每次文件传输时才建立，传输结束就关闭。</code></pre><h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><pre><code>a、电子邮件(E-mail)是因特网上最早流行的一种应用，并且仍然是当今因特网上最重要、最实用的应用之一。b、传统的电话通信属于实时通信，存在以下两个缺点：    (1)电话通信的主叫和被叫双方必须同时在场；    (2)一些不是十分紧迫的电话也常常不必要地打断人们的工作或休息。c、而电子邮件与邮政系统的寄信相似：    ①发件人将邮件发送到自己使用的邮件服务器：    ②发件人的邮件服务器将收到的邮件按其目的地址转发到收件人邮件服务器中的收件人邮箱；    ③收件人在方便的时候访问收件人邮件服务器中自己的邮箱，获取收到的电子邮件。d、电子邮件使用方便、传递迅速而且费用低廉。它不仅可以传送文字信息，而且还可附上声音和图像。e、由于电子邮件的广泛使用，现在许多国家已经正式取消了电报业务。在我国，电信局的电报业务也因电子邮件的普及而濒临消失。</code></pre><h4 id="1、电子邮件系统的基本构成："><a href="#1、电子邮件系统的基本构成：" class="headerlink" title="1、电子邮件系统的基本构成："></a>1、电子邮件系统的基本构成：</h4><pre><code>a、电子邮件系统采用客户/服务器方式。b、电子邮件系统的三个主要组成构件：用户代理，邮件服务器，以及电子邮件所需的协议。    (1)用户代理是用户与电子邮件系统的接口，又称为电子邮件客户端软件。    (2)邮件服务器是电子邮件系统的基础设施。因特网上所有的ISP都有邮件服务器，其功能是发送和接收邮件，同时还要负责维护用户的邮箱。    (3)协议包括邮件发送协议(例如SMTP)和邮件读取协议(例如POP3，IMAP)。</code></pre><h4 id="2、电子邮件发送和接收过程："><a href="#2、电子邮件发送和接收过程：" class="headerlink" title="2、电子邮件发送和接收过程："></a>2、电子邮件发送和接收过程：</h4><pre><code>a、发送方用户代理作为SMTP客户，与发送方邮件服务器中的SMTP服务器建立TCP连接，基于该连接使用SMTP协议发送邮件给发送方邮件服务器；b、发送方邮件服务器中的SMTP客户与接收方邮件服务器中的SMTP服务器进行TCP连接，基于该连接使用SMTP协议发送已收到的待转发邮件给接收方邮件服务器；c、接收方的用户代理作为POP3客户，与接收方邮件服务器中的POP3服务器进行TCP连接，基于该连接使用POP3协议从接收方服务器读取邮件。</code></pre><p><img src="/images/QQ20250219-171329.png" alt="电子邮件"></p><h4 id="3、简单邮件传送协议-SMTP-SimpleMail-Transfer-Protocol-的基本工作原理："><a href="#3、简单邮件传送协议-SMTP-SimpleMail-Transfer-Protocol-的基本工作原理：" class="headerlink" title="3、简单邮件传送协议 SMTP(SimpleMail Transfer Protocol)的基本工作原理："></a>3、简单邮件传送协议 SMTP(SimpleMail Transfer Protocol)的基本工作原理：</h4><p><img src="/images/QQ20250219-171644.png" alt="SMTP协议"></p><h4 id="4、电子邮件信息格式："><a href="#4、电子邮件信息格式：" class="headerlink" title="4、电子邮件信息格式："></a>4、电子邮件信息格式：</h4><pre><code>a、电子邮件的信息格式并不是由SMTP定义的，而是在RFC822中单独定义的。这个RFC文档已在2008年更新为RFC5322。一个电子邮件有信封和内容两部分。而内容又由首部和主体两部分构成。首部和主体两部分的信息都需要由用户来填写。b、首部中包含有关键字，关键字后面加上“冒号”后跟上其内容。    (1)关键字From：后填入发件人电子邮件地址，一般由邮件系统自动填入；    (2)关键字To：后填入一个或多个收件人的电子邮箱地址，必填选项；    (3)关键字Cc：后面填入一个或多个收件人以外的抄送人的电子邮件地址，抄送人收到后可看可不看邮件，可回可不回邮件；    (4)关键字Subject：后填入邮件主题，其反应了邮件的主要内容，必填选项。c、用户写好首部后，邮件系统将自动地将信封拆需的信息提取出来并写在信封上。</code></pre><h4 id="5、多用途因特网邮件扩展-MIME-Multipurpose-Internet-Mail-Extensions"><a href="#5、多用途因特网邮件扩展-MIME-Multipurpose-Internet-Mail-Extensions" class="headerlink" title="5、多用途因特网邮件扩展 MIME(Multipurpose Internet Mail Extensions)"></a>5、多用途因特网邮件扩展 MIME(Multipurpose Internet Mail Extensions)</h4><pre><code>a、SMTP协议只能传送ASCII码文本数据，不能传送可执行文件或其他的二进制对象。b、SMTP不能满足传送多媒体邮件（例如带有图片、音频或视频数据）的需要。并且许多其他非英语国家的文字（例如中文、俄文、甚至带有重音符号的法文或德文）也无法用SMTP传送。c、MIME将邮件中的非ASCII码数据转换为ASCII码数据，即可使用SMTP协议发送；接收方同样需使用MIME将接收到的ASCII数据进行逆转换。d、为解决SMTP传送非ASCII码文本的问题：    (1)增加了5个新的邮件首部字段，这些字段提供了有关邮件主体的信息。    (2)定义了许多邮件内容的格式，对多媒体电子邮件的表示方法进行了标准化。    (3)定义了传送编码，可对任何内容格式进行转换，而不会被邮件系统改变。e、实际上，MIME不仅仅用于SMTP，也用于后来的同样面向ASCII字符的HTTP。</code></pre><h4 id="6、常见的邮件读取协议："><a href="#6、常见的邮件读取协议：" class="headerlink" title="6、常见的邮件读取协议："></a>6、常见的邮件读取协议：</h4><pre><code>a、邮局协议POP(PostOfficeProtocol)：    POP3是其第三个版本，是因特网正式标准。非常简单、功能有限的邮件读取协议。用户只能以下载并删除方式或下载并保留方式从邮件服务器下载邮件到用户方计算机。不允许用户在邮件服务器上管理自己的邮件。（例如创建文件夹，对邮件进行分类管理等）。b、因特网邮件访问协议IMAP(Internet MessageAccessProtocol)：    IMAP4是其第四个版本，目前还只是因特网建议标准。功能比POP3强大的邮件读取协议。用户在自己的计算机上就可以操控邮件服务器中的邮箱，就像在本地操控一样，因此IMAP是一个联机协议。c、POP3和IMAP4都采用基于TCP连接的客户/服务器方式。POP3使用熟知端口110，IMAP4使用熟知端口143。</code></pre><h4 id="7、基于万维网的电子邮件："><a href="#7、基于万维网的电子邮件：" class="headerlink" title="7、基于万维网的电子邮件："></a>7、基于万维网的电子邮件：</h4><pre><code>a、通过浏览器登录（提供用户名和口令）邮件服务器万维网网站就可以撰写、收发、阅读和管理电子邮件。这种工作模式与IMAP很类似，不同的是用户计算机无需安装专门的用户代理程序，只需要使用通用的万维网浏览器。b、邮件服务器网站通常都提供非常强大和方便的邮件管理功能，用户可以在邮件服务器网站上管理和处理自己的邮件，而不需要将邮件下载到本地进行管理。c、若发送方和接收方使用同一个供应商的邮件服务器，用户与服务器之间使用的都是HTTP协议；若发送方和接收方使用不同供应商的邮件服务器，则发送方和接收方与各自的邮件服务器之间使用HTTP协议，邮件服务器之间使用STMP协议发送邮件。</code></pre><h2 id="万维网"><a href="#万维网" class="headerlink" title="万维网"></a>万维网</h2><pre><code>a、万维网WWW(World Wide Web)并非某种特殊的计算机网络。它是一个大规模的、联机式的信息储藏所，是运行在因特网上的一个分布式应用。b、万维网利用网页之间的超链接将不同网站的网页链接成一张逻辑上的信息网。c、万维网是欧洲粒子物理实验室的TimBerners-Lee最初于1989年3月提出的。d、浏览器最重要的部分是宣染引擎，也就是浏览器内核。负责对网页内容进行解析和显示。    (1)不同的浏览器内核对网页内容的解析也有不同，因此同一网页在不同内核的浏览器里的显示效果可能不同；    (2)网页编写者需要在不同内核的浏览器中测试网页显示效果。</code></pre><h4 id="1、万维网的文档组成："><a href="#1、万维网的文档组成：" class="headerlink" title="1、万维网的文档组成："></a>1、万维网的文档组成：</h4><pre><code>a、超文本标记语言HTML(HyperText MarkupLanguage)：使用多种“标签”来描述网页的结构和内容。b、层叠样式表CSS(Cascading Style Sheets)：从审美的角度来描述网页的样式。c、脚本语言JavaScript：控制网页的行为。</code></pre><h4 id="2、统一资源定位符-URL："><a href="#2、统一资源定位符-URL：" class="headerlink" title="2、统一资源定位符 URL："></a>2、统一资源定位符 URL：</h4><pre><code>a、为了方便地访问在世界范围的文档，万维网使用统一资源定位符URL来指明因特网上任何种类“资源”的位置。b、URL的一般形式由以下四个部分组成：    &lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</code></pre><h4 id="3、超文本传输协议-HTTP-HyperText-Transfer-Protocol-："><a href="#3、超文本传输协议-HTTP-HyperText-Transfer-Protocol-：" class="headerlink" title="3、超文本传输协议 HTTP(HyperText Transfer Protocol)："></a>3、超文本传输协议 HTTP(HyperText Transfer Protocol)：</h4><pre><code>a、HTTP定义了浏览器（即万维网客户进程）怎样向万维网服务器请求万维网文档，以及万维网服务器怎样把万维网文档传送给浏览器。b、用户主机中的浏览器进程即客户进程向服务器中的服务器进程发起TCP连接，使用熟知端口号80。基于该连接浏览器进程向服务器进程发送HTTP请求报文，服务器收到后执行相应操作，然后给浏览器进程发回HTTP响应报文。</code></pre><h4 id="4、HTTP-1-0：采用非持续连接方式。在该方式下，每次浏览器要请求一个文件都要与服务器建立-TCP-连接，当收到响应后就立即关闭连接。"><a href="#4、HTTP-1-0：采用非持续连接方式。在该方式下，每次浏览器要请求一个文件都要与服务器建立-TCP-连接，当收到响应后就立即关闭连接。" class="headerlink" title="4、HTTP&#x2F;1.0：采用非持续连接方式。在该方式下，每次浏览器要请求一个文件都要与服务器建立 TCP 连接，当收到响应后就立即关闭连接。"></a>4、HTTP&#x2F;1.0：采用非持续连接方式。在该方式下，每次浏览器要请求一个文件都要与服务器建立 TCP 连接，当收到响应后就立即关闭连接。</h4><pre><code>a、每请求一个文档就要有两倍的RTT的开销(前两次握手的时延为一个RTT，最后一次握手时报文中的数据载荷部分会携带HTTP请求报文，收到响应报文后为第二个RTT)。若一个网页上有很多引用对象（例如图片等），那么请求每一个对象都需要花费2RTT的时间。b、为了减小时延，浏览器通常会建立多个并行的TCP连接同时请求多个对象。但是，这会大量占用万维网服务器的资源，特别是万维网服务器往往要同时服务于大量客户的请求，这会使其负担很重。</code></pre><h4 id="5、HTTP-1-1：-采用持续连接方式。在该方式下，万维网服务器在发送响应后仍然保持这条连接，使同一个客户（浏览器）和该服务器可以继续在这条连接上传送后续的-HTTP-请求报文和响应报文。这并不局限于传送同一个页面上引用的对象，而是只要这些文档都在同一个服务器上就行。"><a href="#5、HTTP-1-1：-采用持续连接方式。在该方式下，万维网服务器在发送响应后仍然保持这条连接，使同一个客户（浏览器）和该服务器可以继续在这条连接上传送后续的-HTTP-请求报文和响应报文。这并不局限于传送同一个页面上引用的对象，而是只要这些文档都在同一个服务器上就行。" class="headerlink" title="5、HTTP&#x2F;1.1： 采用持续连接方式。在该方式下，万维网服务器在发送响应后仍然保持这条连接，使同一个客户（浏览器）和该服务器可以继续在这条连接上传送后续的 HTTP 请求报文和响应报文。这并不局限于传送同一个页面上引用的对象，而是只要这些文档都在同一个服务器上就行。"></a>5、HTTP&#x2F;1.1： 采用持续连接方式。在该方式下，万维网服务器在发送响应后仍然保持这条连接，使同一个客户（浏览器）和该服务器可以继续在这条连接上传送后续的 HTTP 请求报文和响应报文。这并不局限于传送同一个页面上引用的对象，而是只要这些文档都在同一个服务器上就行。</h4><pre><code>a、为了进一步提高效率，HTTP/1.1的持续连接还可以使用流水线方式工作，即浏览器在收到HTTP的响应报文之前就能够连续发送多个请求报文。这样的一个接一个的请求报文到达服务器后，服务器就发回一个接一个的响应报文。这样就节省了很多个RTT时间，使TCP连接中的空闲时间减少，提高了下载文档的效率。</code></pre><h4 id="6、HTTP-报文格式："><a href="#6、HTTP-报文格式：" class="headerlink" title="6、HTTP 报文格式："></a>6、HTTP 报文格式：</h4><pre><code>a、HTTP是面向文本的，其报文中的每一个字段都是一些ASCII码串，并且每个字段的长度都是不确定的。b、HTTP报文由许多字段构成，每个字段之间由空格隔开。c、HTTP请求报文：    (1)第一行为请求行：指明了请求方法，统一资源定位符即所需文档，HTTP版本；    (2)第二行开始为首部行，可以用多个首部行：由字段名和值构成。(首部字段名有Host：表明服务器域名、Connection：发送完文档后是否保持连接、User-Agent：告诉服务器浏览器的类型及版本、Accept-Language：希望优先得到的文档的语言版本)    (3)首部行结束的下一行为空行，若有实体主体(通常不用)，则空行下一行为实体主体。    (4)请求方法的类型：</code></pre><p><img src="/images/QQ20250219-220039.png" alt="请求方法"></p><pre><code>d、HTTP响应报文：    (1)第一行为状态行：由版本、状态码、短语构成；    (2)其余部分与请求报文类似。    (3)状态码分类：</code></pre><p><img src="/images/QQ20250219-220414.png" alt="状态码"></p><h4 id="7、使用-Cookie-在服务器上记录用户信息："><a href="#7、使用-Cookie-在服务器上记录用户信息：" class="headerlink" title="7、使用 Cookie 在服务器上记录用户信息："></a>7、使用 Cookie 在服务器上记录用户信息：</h4><pre><code>a、早期的万维网应用非常简单，仅仅是用户查看存放在不同服务器上的各种静态的文档。因此HTTP被设计为一种无状态的协议。这样可以简化服务器的设计。b、现在，用户可以通过万维网实现各种复杂的应用，如网上购物、电子商务等。这些应用往往需要万维网服务器能够识别用户。c、Cookie提供了一种机制使得万维网服务器能够“记住”用户，而无需用户主动提供用户标识信息。也就是说，Cookie是一种对无状态的HTTP进行状态化的技术。d、当浏览器进程初次向某服务器发送HTTP请求报文时，服务器进程就会为其产生一个唯一的Cookie识别码，并以此为索引在服务器的后端数据库中创建一个项目，用来记录该用户访问该网站的各种信息。接着就会给浏览器进程发回HTTP响应报文，报文中包含一个首部字段为Set-Cookie的首部行，该字段的取值就是Cookie识别码。浏览器收到报文后，就在一个特定的Cookie文件中添加一行。当用户再次使用该浏览器访问这个网站时，每发送一个请求报文，浏览器都会从Cookie文件中取出该网站的Cookie识别码，并放到HTTP请求报文的Cookie首部行中，服务器根据Cookie识别码就可以识别出该用户，并返回该用户的个性化网页。</code></pre><h4 id="8、万维网缓存和代理服务器："><a href="#8、万维网缓存和代理服务器：" class="headerlink" title="8、万维网缓存和代理服务器："></a>8、万维网缓存和代理服务器：</h4><pre><code>a、在万维网中还可以使用缓存机制以提高万维网的效率。b、万维网缓存又称为Web缓存（Web Cache），可位于客户机，也可位于中间系统上，位于中间系统上的Web缓存又称为代理服务器(Proxy Server)。c、Web缓存把最近的一些请求和响应暂存在本地磁盘中。当新请求到达时，若发现这个请求与暂时存放的请求相同，就返回暂存的响应，而不需要按URL的地址再次去因特网访问该资源。若Web缓存的命中率较高，则会大大减少链路上的通信量，减少访问延迟。d、为防止原始服务器中的文件修改而造成代理服务器中文件的差异，原始服务器通常会为每个响应的对象设定一个修改时间字段和一个有效日期字段。当有主机请求原始服务器中的文档时，会先向代理服务器发送请求，若代理服务器中的文档副本未过期，则直接将其封装在响应报文中发回给主机；若文档副本已过期，则代理服务器会向原始服务器发送请求，在请求报文中包含有一个首部字段为lf-modified-since的首部行，该字段的取值就是该文档副本的修改日期，原始服务器根据该文档副本的修改日期，就可判断出代理服务器中存储的该文档副本与自己存储的文档是否一致。若一致，则给代理服务器发送不包含实体主体的响应，状态码为304，短语为Not Modified，代理服务器重新更新该文档的有效日期，然后将其封装在响应报文中发回给主机；若不一致，则给代理服务器发送封装有该文档的响应报文，代理服务器更新文档副本后将其封装在响应报文中发回给主机。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Learning Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络层</title>
      <link href="/2025/02/22/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
      <url>/2025/02/22/%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a><center>网络层</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><pre><code>1、主要任务：实现网络互联，进而实现数据包在各个网络之间的传输。2、实现网络层需要解决的问题：    a、网络层需向运输层提供什么样的服务：可靠传输还是不可靠传输；    b、网络层寻址问题：如何标识和寻找网络上的主机(接口)；    c、路由选择问题：源站选择怎样的路径到达目的站。3、因特网(Internet)是目前全世界用户数量最多的互联网，它使用TCP/IP协议栈。4、由于TCP/IP协议栈的网络层使用网际协议IP，它是整个协议栈的核心协议，因此在TCP/IP协议栈中网络层常称为网际层</code></pre><span id="more"></span><h2 id="网络层提供的两种类型服务"><a href="#网络层提供的两种类型服务" class="headerlink" title="网络层提供的两种类型服务"></a>网络层提供的两种类型服务</h2><h4 id="1、面向连接的虚电路服务："><a href="#1、面向连接的虚电路服务：" class="headerlink" title="1、面向连接的虚电路服务："></a>1、面向连接的虚电路服务：</h4><pre><code>a、可靠通信由网络来保证。b、必须建立网络层的连接——虚电路VC(Virtual Circuit)。虚电路是一条逻辑上的连接，分组在这条逻辑电路上按照存储转发的方式传送。而采用电路交换的电话通信则是先建立一条真正的连接。c、通信双方沿着已建立的虚电路发送分组。d、目的主机的地址仅在连接建立阶段使用，之后每个分组的首部只需携带一条虚电路的编号即可进行通信(构成虚电路的每一段链路都有一个虚电路编号)。e、这种通信方式如果再使用可靠传输的网络协议，就可使所发送的分组最终正确到达接收方(无差错按序到达、不丢失、不重复)。f、通信结束后，需要释放之前所建立的虚电路。g、很多广域分组交换网都使用面向连接的虚电路服务，例如，曾经的X.25和逐渐过时的帧中继FR、异步传输模式ATM等。</code></pre><h4 id="2、无连接的数据报服务："><a href="#2、无连接的数据报服务：" class="headerlink" title="2、无连接的数据报服务："></a>2、无连接的数据报服务：</h4><pre><code>a、可靠通信应当由用户主机来保证。b、不需要建立网络层连接。c、每个分组可走不同的路径。d、每个分组的首部必须携带目的主机的完整地址。e、这种通信方式所传送的分组可能误码、丢失、重复和失序。f、由于网络本身不提供端到端的可靠传输服务，这就使网络中的路由器可以做得比较简单，而且价格低廉(与电信网的交换机相比较)g、因特网采用了这种设计思想，也就是将复杂的网络处理功能置于因特网的边缘(用户主机和其内部的运输层)，而将相对简单的尽最大努力的分组交付功能置于因特网核心。</code></pre><h4 id="3、两种服务的比较"><a href="#3、两种服务的比较" class="headerlink" title="3、两种服务的比较"></a>3、两种服务的比较</h4><p><img src="/images/QQ20250212-142306.png" alt="网络层的两种服务比较"></p><h2 id="IPv4-地址"><a href="#IPv4-地址" class="headerlink" title="IPv4 地址"></a>IPv4 地址</h2><h4 id="1、概述："><a href="#1、概述：" class="headerlink" title="1、概述："></a>1、概述：</h4><pre><code>a、IPv4地址就是给因特网(Internet)上的每一台主机(或路由器)的每一个接口分配一个在全世界范围内是唯一的32比特的标识符。b、IP地址由因特网名字和数字分配机构ICANN(Internet Corporation for Assigned Names and Numbers)进行分配：    (1)我国用户可向亚太网络信息中心APNIC(Asia Pacific Network Information Center)申请IP地址，需要缴费。    (2)2011年2月3日，互联网号码分配管理局IANA(由ICANN行使职能)宣布，IPv4地址已经分配完毕。    (3)我国在2014至2015年也逐步停止了向新用户和应用分配IPv4地址。同时全面开展商用部署IPv6。c、IPv4地址的编址方法经历了三个历史阶段：    (1)1981：分类编址    (2)1985：划分子网    (3)1993：无分类编址d、IPv4地址常采用点分十进制表示方法，即每8个bit位变为一个十进制数，共四个十进制数，每个数之间用点隔开。</code></pre><h4 id="2、分类编址的-IPv4-地址"><a href="#2、分类编址的-IPv4-地址" class="headerlink" title="2、分类编址的 IPv4 地址"></a>2、分类编址的 IPv4 地址</h4><pre><code>a、A类地址前8位为网络号，后24位为主机号，网络号的最高一位固定为0；   B类地址前16位为网络号，后16位为主机号，网络号的最高两位固定为10；   C类地址前24位为网络号，后8位为主机号，网络号的最高三位固定为110；   D类地址为多播地址，最高四位固定为1110；   E类地址保留为今后使用，最高四位固定为1111。b、只有A类、B类和C类地址可分配给网络中的主机或路由器的各接口；c、主机号为“全0”的地址是网络地址，不能分配给主机或路由器的各接口；主机号为“全1”的地址是广播地址，不能分配给主机或路由器的各接口。</code></pre><h5 id="1-A-类地址："><a href="#1-A-类地址：" class="headerlink" title="(1)A 类地址："></a>(1)A 类地址：</h5><pre><code>1、A类地址最小网络号为0(00000000)，被保留不做指派；2、第一个可指派的网络号为1(00000001)，网络地址为1.0.0.0；3、最大网络号为127(01111111),作为本地回环测试地址，不做指派：    最小的本地回环测试地址为127.0.0.1；    最大的本地回环测试地址为127.255.255.254。4、最后一个可指派的网络号为126(01111110)，网络地址为126.0.0.0；5、可指派的网络数量为2^(8-1)-2=126个(除去小网络号0和最大网络号127)，每个网络中可分配的IP地址数量为2^24-2=16777214个(除去全0的网络地址和全1的广播地址)。6、A类地址的第一个十进制数的范围为0~127。</code></pre><h5 id="2-B-类地址："><a href="#2-B-类地址：" class="headerlink" title="(2)B 类地址："></a>(2)B 类地址：</h5><pre><code>1、B类地址最小网络号也是第一个可指派的网络号为128.0(10000000.00000000)，网络地址为128.0.0.0；2、最大网络号也是最后一个可指派的网络号为191.255(10111111.11111111)，网络地址为191.255.0.0；3、可指派的网络数量为2^(16-2)=16384个；每个网络中可分配的IP地址数量为2^16-2=65534个。4、B类地址的第一个十进制数的范围为128~191。</code></pre><h5 id="3-C-类地址："><a href="#3-C-类地址：" class="headerlink" title="(3)C 类地址："></a>(3)C 类地址：</h5><pre><code>1、C类地址最小网络号也是第一个可指派的网络号为192.0.0(11000000.00000000.00000000),网络地址为192.0.0.0；2、最大网络号也是最后一个可指派的网络号为223.255.255(11011111.11111111.11111111)，网络地址为223.255.255.0；3、可指派的网络数量为2^(24-3)=2097152个；每个网络中可分配的IP地址数量为2^8-2=254个。4、C类地址的第一个十进制数的范围为192~223。</code></pre><h5 id="4-特殊-IP-地址："><a href="#4-特殊-IP-地址：" class="headerlink" title="(4)特殊 IP 地址："></a>(4)特殊 IP 地址：</h5><pre><code>1、地址0.0.0.0是一个特殊的IPv4地址，只能作为源地址使用，表示“在本网络上的本主机”封装有DHCP Discovery报文的IP分组的源地址使用0.0.0.0;2、以127开头且后面三个字节非“全0”或“全1”的IP地址是一类特殊的IPv4地址，既可以作为源地址使用也可以作为目的地址使用，用于本地软件环回测试，例如常用的环回测试地址127.0.0.1；3、地址255.255.255.255是一个特殊的IPv4地址，只能作为目的地址使用，表示“只在本网络上进行广播(各路由器均不转发)”</code></pre><p><img src="/images/QQ20250212-162621.png" alt="特殊IP地址"></p><h4 id="3、划分子网的-Ipv4-地址：通过借用分类-IP-地址的一些主机位来作为子网位，将一个大的网络地址划分为多个子网，二级结构的分类-IP-地址-网络号-主机号-变为三级结构的划分子网-IP-地址-网络号-子网号-主机号-。"><a href="#3、划分子网的-Ipv4-地址：通过借用分类-IP-地址的一些主机位来作为子网位，将一个大的网络地址划分为多个子网，二级结构的分类-IP-地址-网络号-主机号-变为三级结构的划分子网-IP-地址-网络号-子网号-主机号-。" class="headerlink" title="3、划分子网的 Ipv4 地址：通过借用分类 IP 地址的一些主机位来作为子网位，将一个大的网络地址划分为多个子网，二级结构的分类 IP 地址(网络号-主机号)变为三级结构的划分子网 IP 地址(网络号-子网号-主机号)。"></a>3、划分子网的 Ipv4 地址：通过借用分类 IP 地址的一些主机位来作为子网位，将一个大的网络地址划分为多个子网，二级结构的分类 IP 地址(网络号-主机号)变为三级结构的划分子网 IP 地址(网络号-子网号-主机号)。</h4><h5 id="a、子网掩码：32bit-的子网掩码可用表明分类-IP-地址的主机号部分被借用了几个比特作为子网号。"><a href="#a、子网掩码：32bit-的子网掩码可用表明分类-IP-地址的主机号部分被借用了几个比特作为子网号。" class="headerlink" title="a、子网掩码：32bit 的子网掩码可用表明分类 IP 地址的主机号部分被借用了几个比特作为子网号。"></a>a、子网掩码：32bit 的子网掩码可用表明分类 IP 地址的主机号部分被借用了几个比特作为子网号。</h5><pre><code>1、子网掩码使用连续的比特1来对应网络号和子网号；2、子网掩码使用连续的比特0来对应主机号；3、将划分子网的IPv4地址与其相应的子网掩码进行逻辑与运算就可得到该IPv4地址所在子网的网络地址。</code></pre><h5 id="b、默认子网掩码：指在未划分子网的情况下使用的子网掩码。"><a href="#b、默认子网掩码：指在未划分子网的情况下使用的子网掩码。" class="headerlink" title="b、默认子网掩码：指在未划分子网的情况下使用的子网掩码。"></a>b、默认子网掩码：指在未划分子网的情况下使用的子网掩码。</h5><pre><code>A类地址的默认子网掩码为255.0.0.0；B类地址的默认子网掩码为255.255.0.0；C类地址的默认子网掩码为255.255.255.0。</code></pre><h4 id="4、无分类编址的-IPv4-地址：将-32bit-分为网络前缀和主机编号，网络前缀的-bit-数写在“-”后面。"><a href="#4、无分类编址的-IPv4-地址：将-32bit-分为网络前缀和主机编号，网络前缀的-bit-数写在“-”后面。" class="headerlink" title="4、无分类编址的 IPv4 地址：将 32bit 分为网络前缀和主机编号，网络前缀的 bit 数写在“&#x2F;”后面。"></a>4、无分类编址的 IPv4 地址：将 32bit 分为网络前缀和主机编号，网络前缀的 bit 数写在“&#x2F;”后面。</h4><pre><code>a、1993年，IETF发布了无分类域间路由选择CIDR(Classless Inter-Domain Routing)的RFC文档:RFC 1517~1519和1520：    CIDR消除了传统的A类、B类和C类地址，以及划分子网的概念；    CIDR可以更加有效地分配IPv4的地址空间，并且可以在新的IPv6使用之前允许因特网    的规模继续增长。b、CIDR使用“斜线记法”或称CIDR记法。即在IPv4地址后面加上斜线“/”，在斜线后面写上网络前缀所占的比特数量。c、CIDR实际上是将网络前缀都相同的连续的IP地址组成一个“CIDR地址块。d、我们只要知道CIDR地址块中的任何一个地址，就可以知道该地址块的全部细节，地址快的大小由网络前缀的bit位数决定:    地址块的最小地址：即主机号全0；    地址块的最大地址：即主机号全1；    地址块中的地址数量：即主机号的数量，2^主机号位数；    地址块聚合某类网络(A类、B类或C类)的数量：地址数量/某类网络的主机数    地址掩码(也可继续称为子网掩码)：网络前缀对应的掩码为1，主机号对应的掩码为0。e、路由聚合(构造超网)：将同一个路由连接的多个网络，寻找其有相同的前缀作为网络前缀，其相同前缀的位数作为网络前缀的位数，其余位取0，形成聚合地址快。f、路由聚合解决了路由表的内容冗余问题，使用路由聚合能够缩小路由表的规模，减少路由表的内存。g、路由聚合的网络前缀越长，地址块越小，路由越具体;若路由器查表转发分组时发现有多条路由可选，则选择网络前最长的那条，这称为最长前缀匹配，因为这样的路由更具体。</code></pre><h4 id="5、IPv4-地址的应用规划："><a href="#5、IPv4-地址的应用规划：" class="headerlink" title="5、IPv4 地址的应用规划："></a>5、IPv4 地址的应用规划：</h4><pre><code>a、定长的子网掩码FLSM(Fixed Length Subnet Mask)：使用长度固定的同一个子网掩码划分子网。b、变长的子网掩码VLSM(Variable Length Subnet Mask)：使用长度不定的不同掩码划分子网。c、变长子网掩码分配原则：每个子块的起点位置不能随意选取，只能选取块大小整数倍的地址作为“起点”。建议先给大的子块分配。</code></pre><p><img src="/images/QQ20250212-184505.png" alt="不同的子网划分"></p><h2 id="IP-数据报的发送和转发过程"><a href="#IP-数据报的发送和转发过程" class="headerlink" title="IP 数据报的发送和转发过程"></a>IP 数据报的发送和转发过程</h2><h4 id="1、IP-数据报的发送和转发过程包含以下两部分"><a href="#1、IP-数据报的发送和转发过程包含以下两部分" class="headerlink" title="1、IP 数据报的发送和转发过程包含以下两部分:"></a>1、IP 数据报的发送和转发过程包含以下两部分:</h4><pre><code>a、主机发送IP数据报b、路由器转发IP数据报</code></pre><h4 id="2、数据报交付的分类："><a href="#2、数据报交付的分类：" class="headerlink" title="2、数据报交付的分类："></a>2、数据报交付的分类：</h4><pre><code>a、同一个网络之间的主机：可直接通信，属于直接交付；b、不同网络之间的主机：数据报需要通过路由器中转，属于间接交付。</code></pre><h4 id="3、源主机判断目的主机是否和自身在同一个网络："><a href="#3、源主机判断目的主机是否和自身在同一个网络：" class="headerlink" title="3、源主机判断目的主机是否和自身在同一个网络："></a>3、源主机判断目的主机是否和自身在同一个网络：</h4><pre><code>a、将自身IP地址与子网掩码相与，获得自身所在网络的网络地址；b、将目的主机IP地址与自身子网掩码相与，获得目的主机的网络地址；c、通过对比自身网络的网络地址和目的主机的网络地址可知是否在同一个网络中。</code></pre><h4 id="4、默认网关：与某局域网直接相连的路由器接口-IP-地址，该局域网内的主机将该接口的-IP-地址作为默认网关。"><a href="#4、默认网关：与某局域网直接相连的路由器接口-IP-地址，该局域网内的主机将该接口的-IP-地址作为默认网关。" class="headerlink" title="4、默认网关：与某局域网直接相连的路由器接口 IP 地址，该局域网内的主机将该接口的 IP 地址作为默认网关。"></a>4、默认网关：与某局域网直接相连的路由器接口 IP 地址，该局域网内的主机将该接口的 IP 地址作为默认网关。</h4><pre><code>局域网内的主机与外部网络中的主机通信时，会将IP数据报传输给默认网关，由默认网关也就是路由器帮主机将IP数据报转发出去。</code></pre><h4 id="5、路由器转发数据报过程："><a href="#5、路由器转发数据报过程：" class="headerlink" title="5、路由器转发数据报过程："></a>5、路由器转发数据报过程：</h4><pre><code>a、检查IP数据报首部是否出错：若出错，则直接丢弃该IP数据报并通告源主机；若没有出错，则进行转发。b、根据IP数据报的目的地址在路由表中查找匹配的条目：若找到匹配的条目，则转发给条目中指示的下一跳；若找不到，则丢弃该IP数据报并通告源主机。c、路由表(目的网络-地址掩码-下一跳地址)：路由器转发时将IP数据报首部的目的地址逐条与地址掩码相与，看其是否与对应的目的网络的地址匹配，若相同则根据下一跳地址进行转发。</code></pre><h4 id="6、"><a href="#6、" class="headerlink" title="6、"></a>6、</h4><pre><code>a、IP 路由器工作在 TCP/IP 体系结构的网际层(或称 IP 层)，TCP/IP 体系结构的网际层并不负责可靠传输，也就是不能确保传输的 IP 分组不丢失。b、IP 路由器对收到的 IP 分组头进行差错校验，当发现错误时会丢奔该 IP 分组并向源主机发送 ICMP 差错报告报文(类型为参数错误)。c、路由器既隔离冲突域又隔离广播域，无论是针对自身网络的广播帧还是针对其他网络的广播帧，路由器均不会进行转发。</code></pre><h2 id="静态路由配置"><a href="#静态路由配置" class="headerlink" title="静态路由配置"></a>静态路由配置</h2><pre><code>a、静态路由配置是指用户或网络管理员使用路由器的相关命令给路由器人工配置路由表：    (1)这种人工配置方式简单、开销小。但不能及时适应网络状态(流量、拓扑等)的变化。    (2)一般只在小规模网络中采用。b、使用静态路由配置可能出现以下导致产生路由环路的错误：    (1)配置错误    (2)聚合了不存在的网络    (3)网络故障c、路由条目类型：    (1)直连：目的网络地址与路由器直接相连；    (2)静态：人工配置的静态路由；    (3)动态：根据相关协议自动学习。</code></pre><h4 id="1、默认路由：是一种特殊的静态路由，当路由表中的条目与数据包目的地址没有匹配的表项时，数据包将根据默认路由条目进行转发。"><a href="#1、默认路由：是一种特殊的静态路由，当路由表中的条目与数据包目的地址没有匹配的表项时，数据包将根据默认路由条目进行转发。" class="headerlink" title="1、默认路由：是一种特殊的静态路由，当路由表中的条目与数据包目的地址没有匹配的表项时，数据包将根据默认路由条目进行转发。"></a>1、默认路由：是一种特殊的静态路由，当路由表中的条目与数据包目的地址没有匹配的表项时，数据包将根据默认路由条目进行转发。</h4><pre><code>a、默认路由在某些时候是非常有效的，例如在末梢网络中，默认路由可以大大简化路由器的配置，减轻网络管理员的工作负担。b、默认路由条目的目的网络为0.0.0.0/0，可作为小型网络进入因特网的入口。c、默认路由的网络前缀最短，路由最模糊。</code></pre><h4 id="2、特定主机路由：对特定的目的主机指明一个静态路由条目。"><a href="#2、特定主机路由：对特定的目的主机指明一个静态路由条目。" class="headerlink" title="2、特定主机路由：对特定的目的主机指明一个静态路由条目。"></a>2、特定主机路由：对特定的目的主机指明一个静态路由条目。</h4><pre><code>a、采用特定主机路由可使网络管理人员能够更方便地控制网络和测试网络，同时也可在需要考虑某种安全问题时采用这种特定主机路由。b、特定主机路由的网络前缀最长，路由最具体。</code></pre><h4 id="3、最长前缀匹配：当路由器收到一个-IP-数据包时，它会将数据包的目的-IP-地址与自己本地路由表中的所有路由表进行逐位（Bit-By-Bit）对比，直到找到匹配度最长的条目进行转发。"><a href="#3、最长前缀匹配：当路由器收到一个-IP-数据包时，它会将数据包的目的-IP-地址与自己本地路由表中的所有路由表进行逐位（Bit-By-Bit）对比，直到找到匹配度最长的条目进行转发。" class="headerlink" title="3、最长前缀匹配：当路由器收到一个 IP 数据包时，它会将数据包的目的 IP 地址与自己本地路由表中的所有路由表进行逐位（Bit-By-Bit）对比，直到找到匹配度最长的条目进行转发。"></a>3、最长前缀匹配：当路由器收到一个 IP 数据包时，它会将数据包的目的 IP 地址与自己本地路由表中的所有路由表进行逐位（Bit-By-Bit）对比，直到找到匹配度最长的条目进行转发。</h4><h4 id="4、路由环路问题："><a href="#4、路由环路问题：" class="headerlink" title="4、路由环路问题："></a>4、路由环路问题：</h4><pre><code>a、配置错误：配置静态路由时错误地将下一跳地址配置为先前路径上的路由，从而形成环路，使数据包在网络中不断转发。    解决：为了防止IP数据报在路由环路中永久兜圈，在IP数据报首部设有生存时间TTL字段。IP数据报进入路由器后，TTL字段的值减1。若TTL的值不等于0，则被路由器转发，否则被丢弃。b、聚合不存在的网络：数据包的目的地址为某一聚合地址中不存在的网络，错误地被路由器转发，而下一个路由器的路由表中没有该目的地址，被转发至默认路由，形成环路。    解决：在相应路由器的路由表中添加针对聚合网络中不存在网络的黑洞路由。c、黑洞路由：为静态路由，黑洞路由的下一跳为null0，为路由器内部的虚拟接口，转发至该接口即丢弃数据报。d、网络故障：若路由器检测到某接口直连的网络不可达，就会自动在其路由表中删除相关路由条目，致使发往该网络的数据报因为查找不到路由条目而转发至默认路由，形成回路。    解决：在某网络发生故障时，在直连的路由器中添加针对该网络的黑洞路由。若一段时间故障解决，路由器自动添加相关条目并将人工配置的黑洞路由条目置为失效状态。若再次检测到故障，则自动删除直连网络的路由条目，再次启动黑洞路由条目。</code></pre><h2 id="路由选择协议"><a href="#路由选择协议" class="headerlink" title="路由选择协议"></a>路由选择协议</h2><h4 id="1、路由选择分类："><a href="#1、路由选择分类：" class="headerlink" title="1、路由选择分类："></a>1、路由选择分类：</h4><pre><code>a、静态路由选择：    (1)由人工配置的网络路由、默认路由、特定主机路由、黑洞路由等都属于静态路由。    (2)这种人工配置方式简单、开销小。但不能及时适应网络状态(流量、拓扑等)的变化    (3)一般只在小规模网络中采用。b、动态路由选择：    (1)路由器通过路由选择协议自动获取路由信息。    (2)比较复杂、开销比较大。能较好地适应网络状态的变化。    (3)适用于大规模网络。</code></pre><h4 id="2、因特网采用的路由选择协议特点："><a href="#2、因特网采用的路由选择协议特点：" class="headerlink" title="2、因特网采用的路由选择协议特点："></a>2、因特网采用的路由选择协议特点：</h4><pre><code>a、自适应：采用动态路由选择，能较好地适应网络状态的变化。b、分布式：因特网中的各路由器通过相互间的信息交互即交换路由信息，共同完成路由信息的获取和更新。c、分层次：将整个因特网划分为许多较小的自治系统AS(Autonomous System)。如将一个较大的因特网服务供应商ISP就可划为一个自治系统。自治系统内部和外部采用不同的路由选择协议，分别进行路由选择。</code></pre><h4 id="3、常见的路由选择协议："><a href="#3、常见的路由选择协议：" class="headerlink" title="3、常见的路由选择协议："></a>3、常见的路由选择协议：</h4><pre><code>a、内部网关协议IGP(内部路由协议IRP)：自治系统内部选择的路由协议(域内路由选择)，与其他自治系统选择何种协议无关。    (1)路由信息协议RIP：基于距离向量，在因特网上最早使用；    (2)内部网关路由协议IGRP：基于距离向量，IGRP是思科早期私有的协议，现在已被EIGRP取代；    (3)增强型内部网关路由协议EIGRP：思科私有的，用来取代IGRP的混合型路由协议(结合距离向量和链路状态)；    (4)开放式最短路径优先OSPF：基于链路状态，OSPF在各种网络中广泛使用；    (5)中间系统到中间系统IS-IS：基于链路状态，集成化IS-IS是ISP骨干网上最长常用的IGP协议。b、外部网关协议EGP(外部路由协议ERP)：自治系统之间的路由选择(域间路由选择)。边界网关协议BGP。</code></pre><h4 id="4、路由器基本结构：具有多个输入端口和输出端口的专用计算机，其任务为转发分组。"><a href="#4、路由器基本结构：具有多个输入端口和输出端口的专用计算机，其任务为转发分组。" class="headerlink" title="4、路由器基本结构：具有多个输入端口和输出端口的专用计算机，其任务为转发分组。"></a>4、路由器基本结构：具有多个输入端口和输出端口的专用计算机，其任务为转发分组。</h4><pre><code>a、路由选择部分：其核心为路由选择处理机，根据所使用路由选择协议，周期性地与其他路由器交换路由信息，更新路由表。b、分组转发部分：    (1)交换结构：若收到的分组为普通待转发数据分组，则根据分组首部的目的地址进行查表转发(交换结构中的表为转发表)，若找不到匹配转发条目则丢弃分组；若收到的分组为路由器之间交换路由信息的路由报文，则将该分组送往路由选择处理机，路由选择处理机根据分组内容更新自己的路由表，进而更新交换结构的转发表。    (2)输入端口：输入端口的物理层将收到的信号转换为比特流，交付链路层；链路层识别出帧，去掉帧头帧尾交付网络层；网络层收到分组交给交换结构。    (3)输出端口：输出端口收到交换结构的待转发分组，其网络层更新分组首部某些字段的值(如生存时间-1),交给链路层封装成帧，后物理层将其视为比特流转变为相应的电信号发送。    (4)输入缓冲区：暂存新进入路由器但来不及处理的分组。    (5)输出缓冲区：暂存已处理完毕但来不及发送的分组。c、路由表和转发表：路由表一般仅包含从目的网络到下一跳的映射，路由表需要对网络拓扑变化的计算最优化；转发表是从路由表得出的，转发表的结构应当使查找过程最优化。</code></pre><h2 id="路由信息协议-RIP"><a href="#路由信息协议-RIP" class="headerlink" title="路由信息协议 RIP"></a>路由信息协议 RIP</h2><pre><code>a、路由信息协议RIP(Routing Infomation Protoco)是内部网关协议IGP中最先得到广泛使用的协议之一，其相关标准文档为RFC 1058。b、RIP要求自治系统AS内的每一个路由器都要维护从它自己到AS内其他每一个网络的距离记录。这是一组距离，称为“距离向量D-V(Distance-Vector)”。c、RIP使用跳数(Hop Count)作为度量(Metric)来衡量到达目的网络的距离。    (1)路由器到直连网络的距离定义为1.    (2)路由器到非直连网络的距离定义为所经过的路由器数加1.    (3)允许一条路径最多只能包含15个路由器。“距离”等于16时相当于不可达。因此，RIP只适用于小型互联网。d、RIP认为好的路由就是“距离短”的路由，也就是所通过路由器数量最少的路由。当到达同一目的网络有多条“距离相等”的路由时，可以进行等价负载均衡，即将通信量均衡地分布到多条等价的路由上。e、RIP包含以下三个要点:    (1)和谁交换信息：仅和相邻路由器交换信息。    (2)交换什么信息：自己的路由表。    (3)何时交换信息：周期性交换(例如每30秒)。</code></pre><h4 id="1、基本工作过程："><a href="#1、基本工作过程：" class="headerlink" title="1、基本工作过程："></a>1、基本工作过程：</h4><pre><code>a、路由器刚开始工作时，只知道自己到直连网络的距离为1。b、每个路由器仅和相邻路由器周期性地交换并更新路由信息。c、若干次交换和更新后，每个路由器都知道到达本AS内各网络的最短距离和下一跳地址，称为收敛。</code></pre><h4 id="2、路由条目更新规则-条目内容为：目的网络-距离-下一跳-："><a href="#2、路由条目更新规则-条目内容为：目的网络-距离-下一跳-：" class="headerlink" title="2、路由条目更新规则(条目内容为：目的网络-距离-下一跳)："></a>2、路由条目更新规则(条目内容为：目的网络-距离-下一跳)：</h4><pre><code>a、路由器收到相邻路由器封装有路由信息的RIP更新报文，其内容包含相邻路由器的路由条目：目的网络及距离。接收报文的路由器无需关心该路由条目的下一跳，仅将每个条目的距离加1，并将下一跳设为相邻路由器，便可和自身路由条目对比更新，因其自身到达相邻路由器中目的网络的距离为相邻路由器条目中的距离加1。b、若发现新的网络，添加；c、若目的网络和下一跳相同，最新消息，更新距离；d、若目的网络相同，下一跳不同，新路由距离小，更新距离和下一跳为新路由；e、若目的网络相同，下一跳不同，距离相同，添加，进行等价负载均衡；f、若目的网络相同，下一跳不同，新路由距离大于旧路由，不更新。</code></pre><h4 id="3、RIP“坏消息传得慢”问题："><a href="#3、RIP“坏消息传得慢”问题：" class="headerlink" title="3、RIP“坏消息传得慢”问题："></a>3、RIP“坏消息传得慢”问题：</h4><pre><code>a、某路由器直连网络故障，路由器在更改条目为不可达之后，还未来得及向相邻路由器发送RIP更新报文，期间收到更新报文，因更新报文中到达故障网络的距离小于自身修改的不可达，听信“谣言”，以为故障网络可达，并修改自身条目距离为报文距离加1。后该错误条目随RIP更新报文发往相邻路由器，相邻路由器收到后修改自身条目距离加1，以此循环直至距离增加到16即不可达。b、“坏消息传播得慢”又称为路由环路或距离无穷计数问题，这是距离向量算法的一个固有问题。c、可以采取多种措施减少出现该问题的概率或减小该问题带来的危害：    (1)限制最大路径距离为15(16表示不可达);    (2)当路由表发生变化时就立即发送更新报文(即“触发更新”)，而不仅是周期性发送;    (3)让路由器记录收到某特定路由信息的接口，而不让同一路由信息再通过此接口向反方向传送(即“水平分割”)。</code></pre><h2 id="开放最短路径优先协议-OSPF"><a href="#开放最短路径优先协议-OSPF" class="headerlink" title="开放最短路径优先协议 OSPF"></a>开放最短路径优先协议 OSPF</h2><pre><code>a、开放最短路径优先OSPF(0pen ShorestPath First)，是为克服RIP的缺点在1989年开发出来的。“开放”表明OSPF协议不是受某一家厂商控制，而是公开发表的。“最短路径优先”是因为使用了Dijkstra提出的最短路径算法SPF。b、OSPF是基于链路状态的，而不像RIP那样是基于距离向量的。c、OSPF采用SPF算法计算路由，从算法上保证了不会产生路由环路。d、OSPF不限制网络规模，更新效率高，收敛速度快。e、链路状态是指本路由器都和哪些路由器相邻，以及相应链路的“代价”(cost)。“代价”用来表示费用、距离、时延、带宽，等等。这些都由网络管理人员来决定。这些代价被SPF算法用于计算最短路径。</code></pre><h4 id="1、工作原理："><a href="#1、工作原理：" class="headerlink" title="1、工作原理："></a>1、工作原理：</h4><pre><code>a、OSPF相邻路由器之间通过交互问候(Hello)分组，建立和维护邻居关系：    (1)Hello分组封装在IP数据报中，发往组播地址224.0.0.5    (2)IP数据报格式：</code></pre><table><thead><tr><th align="center">源 IP</th><th align="center">目的 IP</th><th align="center">协议号</th><th>OSPF 首部</th><th>OSPF 载荷分组</th></tr></thead><tbody><tr><td align="center">路由器接口 IP</td><td align="center">224.0.0.5</td><td align="center">89</td><td></td><td></td></tr></tbody></table><pre><code>    (协议号89表明IP数据报的数据载荷为OSPF分组)    (3)发送周期为10秒;40秒未收到来自邻居路由器的Hello分组，则认为该邻居路由器不可达。b、使用OSPF的每个路由器都会产生链路状态通告LSA(Link State Adverisement)。LSA中包含以下内容:    (1)直连网络的链路状态信息。    (2)邻居路由器的链路状态信息。c、LSA被封装在链路状态更新分组LSU中，采用洪泛法发送。d、使用OSPF的每个路由器都有一个链路状态数据库LSDB，用于存储LSA。通过各路由器洪泛发送封装有自己LSA的LSU分组，各路由器的LSDB最终将达到一致。e、使用OSPF的各路由器基于LSDB进行最短路径优先SPF计算，构建出各自到达其他各路由器的最短路径，即构建各自的路由表。</code></pre><h4 id="2、OSPF-的分组类型："><a href="#2、OSPF-的分组类型：" class="headerlink" title="2、OSPF 的分组类型："></a>2、OSPF 的分组类型：</h4><pre><code>a、类型1，问候(Hello)分组：用来发现和维护邻居路由器的可达性。b、类型2，数据库描述(Database Description)分组：向邻居路由器给出自己的链路状态数据库中的所有链路状态项目的摘要信息。c、类型3，链路状态请求(Link State Request)分组：向邻居路由器请求发送某些链路状态项目的详细信息。d、类型4，链路状态更新(Link State Update)分组：路由器使用这种分组将其链路状态进行洪泛发送，即用洪泛法对全网更新链路状态。e、类型5，链路状态确认(Link State Acknowledgment)分组：这是对链路状态更新分组的确认分组。</code></pre><h4 id="3、基本工作过程："><a href="#3、基本工作过程：" class="headerlink" title="3、基本工作过程："></a>3、基本工作过程：</h4><pre><code>a、建立和维护邻居关系：相邻路由器之间周期性发送问候分组。b、链路状态数据库同步：建立邻居关系后，各路由向相邻路由发送自身的数据库描述分组；各路由器接收后，对比自身数据库发现缺少的某些链路状态项目；向相邻路由器发送链路状态请求分组；相邻路由器收到请求分组后，将缺少的链路状态项目的详细信息封装在链路状态更新分组中，发送给发送请求的路由器；路由器收到更新分组后，将所缺少的链路状态项目的详细信息添加到自己的链路状态数据库中，并向相邻路由器发送链路状态确认分组；最终，各路由器的链路状态数据库达到一致。c、新情况下链路状态数据库同步：每30分钟或链路状态发生变化时，路由器都会发送链路状态更新分组，收到该分组的其他路由器都会洪泛转发该分组，并给该路由器发送链路状态确认分组。</code></pre><p><img src="/images/QQ20250215-221019.png" alt="基本工作过程"></p><h4 id="4、OSPF-在多点接入网络中路由器邻居关系的建立："><a href="#4、OSPF-在多点接入网络中路由器邻居关系的建立：" class="headerlink" title="4、OSPF 在多点接入网络中路由器邻居关系的建立："></a>4、OSPF 在多点接入网络中路由器邻居关系的建立：</h4><pre><code>a、多点接入网络中的路由器两两相邻，若不采取其他机制，将会产生大量的多播分组。b、解决：选举指定路由器DR(designated router)和备用的指定路由器BDR(backup designated router)。所有的非DR/BDR只与DR/BDR建立邻居关系；非DR/BDR之间通过DR/BDR交换信息。</code></pre><h4 id="5、为了使-OSPF-能够用于规模很大的网络，OSPF-把一个自治系统再划分为若干个更小的范围叫做区域-Area"><a href="#5、为了使-OSPF-能够用于规模很大的网络，OSPF-把一个自治系统再划分为若干个更小的范围叫做区域-Area" class="headerlink" title="5、为了使 OSPF 能够用于规模很大的网络，OSPF 把一个自治系统再划分为若干个更小的范围叫做区域(Area)"></a>5、为了使 OSPF 能够用于规模很大的网络，OSPF 把一个自治系统再划分为若干个更小的范围叫做区域(Area)</h4><p><img src="/images/QQ20250215-221221.png" alt="区域划分"></p><pre><code>a、每个区域都有一个32比特的区域标识符，可用点分十进制表示。主干区域的标识符必须为0。b、主干区域用于连通其他区域，其他区域的标识符各不相同且不能为0。每个区域的规模不应超过200个路由器。c、划分区域将利用洪泛法交换链路状态信息的范围局限到每个区域而不是整个自治系统，这样减少了整个网络上的通信量。d、区域内路由器：路由器的所有接口都在一个区域内。e、区域边界路由器：一个接口用于连接本区域，另一个接口用于连接主干区域。分别向主干区域发送自身区域的链路状态通告和向自身区域发送其他区域的链路状态通告。f、主干路由器：主干区域内的路由器，也可将区域边界路由器看作主干路由器。g、自治系统边界路由器：主干区域内的专门用于和本自治系统外的其他自治系统交换路由信息的路由器。</code></pre><h2 id="边界网关协议-BGP"><a href="#边界网关协议-BGP" class="headerlink" title="边界网关协议 BGP"></a>边界网关协议 BGP</h2><pre><code>a、在不同自治系统内，度量路由的“代价”(距离，带宽，费用等)可能不同。因此，对于自治系统之间的路由选择，使用“代价”作为度量来寻找最佳路由是不行的。b、自治系统之间的路由选择必须考虑相关策略(政治，经济，安全等)。c、BGP只能是力求寻找一条能够到达目的网络且比较好的路由(不能兜圈子)而并非要寻找一条最佳路由。d、适用多级结构的以太网。</code></pre><h4 id="1、基本工作原理："><a href="#1、基本工作原理：" class="headerlink" title="1、基本工作原理："></a>1、基本工作原理：</h4><pre><code>a、在配置BGP时，每个自治系统的管理员要选择至少一个路由器作为该自治系统的“BGP发言人”，一般两个BGP发言人通过一个共享网络连接在一起，往往为BGP边界路由器。b、不同自治系统的BGP发言人要交换路由信息，首先必须建立TCP连接，端口号为179：    (1)在此TCP连接上交换BGP报文以建立BGP会话；    (2)利用BGP会话交换路由信息(例如，增加新的路由，或撤销过时的路由，以及报告出错的情况等)；    (3)使用TCP连接交换路由信息的两个BGP发言人，彼此称为对方的邻站(neighbor)或对等站(peer)。c、BGP 发言人除了运行 BGP 外，还必须运行自己所在自治系统所使用的内部网关协议 IGP，例如OSPF或RIP。d、BGP发言人交换网络可达性的信息(要到达某个网络所要经过的一系列自治系统)。e、当BGP发言人互相交换了网络可达性的信息后，各BGP发言人就根据所采用的策略从收到的路由信息中找出到达各自治系统的较好的路由。也就是构造出树形结构、不存在回路的自治系统连通图。</code></pre><h4 id="2、BGP-4-的四种报文："><a href="#2、BGP-4-的四种报文：" class="headerlink" title="2、BGP-4 的四种报文："></a>2、BGP-4 的四种报文：</h4><pre><code>a、OPEN(打开)报文:用来与相邻的另一个BGP发言人建立关系，使通信初始化。b、UPDATE(更新)报文:用来通告某一路由的信息，以及列出要撤销的多条路由c、KEEPALIVE(保活)报文:用来周期性地证实邻站的连通性。d、NOTIFICATION(通知)报文:用来发送检测到的差错。</code></pre><h2 id="IPv4-数据报的首部格式"><a href="#IPv4-数据报的首部格式" class="headerlink" title="IPv4 数据报的首部格式"></a>IPv4 数据报的首部格式</h2><p><img src="/images/QQ20250216-143930.png" alt="IP数据报首部格式"></p><pre><code>a、IP数据报首部以32个bit即4字节为单位描述。前20字节为固定部分，其为每个IP数据报首部必须包含的部分；最长可有40字节的可变部分，来增加IP数据报的功能。b、版本字段：占4比特，表示IP协议的版本。通信双方使用的IP协议的版本必须一致。目前广泛使用的IP协议版本号为4(即IPv4)。c、首部长度字段：占4比特，表示IP数据报首部的长度。该字段的取值以4字节为单位。最小十进制取值为5，表示IP数据报首部只有20字节固定部分;最大十进制取值为15，表示IP数据报首部包含20字节固定部分和最大40字节可变部分。d、可选字段：长度从1个字节到40个字节不等。用来支持排错、测量及安全等措施。可选字段增加了IP数据报的功能，但这同时也使得IP数据报的首部长度成为可变的。这就增加了每一个路由器处理IP数据报的开销。实际上可选字段很少被使用。e、填充字段：确保首部长度为4字节的整数倍(首部长度字段以4字节为单位，因此需要保证首部长度为4的整数倍)。使用全0进行填充。f、区分服务字段：占8比特，用来获得更好的服务。该字段在旧标准中叫作服务类型，但实际上一直没有被使用过。1998年，因特网工程任务组IETF把这个字段改名为区分服务。利用该字段的不同数值可提供不同等级的服务质量。只有在使用区分服务时，该字段才起作用。一般情况下都不使用该字段。g、总长度字段：占16比特，表示IP数据报的总长度(首部+数据载荷)。最大取值为十进制的65535，以字节为单位。h、标识字段、标志字段、片偏移字段共同用于IP数据报分片，由于IP数据报的长度受限于数据链路层帧的数据载荷即最大传输单元MTU，当IP数据报的长度大于其时需对IP数据报的数据载荷进行分片使其变为更小的IP数据报，每个分片的IP数据报都要有首部：    (1)标识字段：占16比特，属于同一个数据报的各分片数据报应该具有相同的标识。IP软件维持一个计数器，每产生一个数据报，计数器值加1，并将此值赋给标识字段。    (2)标志字段：占3比特，各比特含义如下:        DF位:1表示不允许分片;0表示允许分片。        MF位:1表示“后面还有分片”;0表示“这是最后一个分片”。        保留位: 必须为0。    (3)片偏移字段；占13比特，指出分片数据报的数据载荷部分偏移其在原数据报的位置有多少个单位。片偏移以8个字节为单位。i、生存时间TTL字段：占8比特，最初以秒为单位，最大生存周期为255秒;路由器转发IP数据报时，将IP数据报首部中的该字段的值减去IP数据报在本路由器上所耗费的时间，若不为0就转发，否则就丢弃。现在以“跳数”为单位，路由器转发IP数据报时，将IP数据报首部中的该字段的值减1，若不为0就转发，否则就丢弃。其作用为防止IP数据报在网络中永久兜圈。j、协议字段：占8比特，指明IPv4数据报的数据部分是何种协议数据单元。常用的一些协议和相应的协议字段值如下：</code></pre><table><thead><tr><th align="center">协议名称</th><th align="center">ICMP</th><th align="center">IGMP</th><th align="center">TCP</th><th align="center">UDP</th><th align="center">IPv6</th><th align="center">OSPF</th></tr></thead><tbody><tr><td align="center">协议字段值</td><td align="center">1</td><td align="center">2</td><td align="center">6</td><td align="center">17</td><td align="center">41</td><td align="center">89</td></tr></tbody></table><pre><code>k、首部检验和字段：占16比特，用来检测首部在传输过程中是否出现差错。比CRC检验码简单，称为因特网检验和。IP数据报每经过一个路由器，路由器都要重新计算首部检验和，因为某些字段(生存时间、标志片偏移等)的取值可能发生变化。由于IP层本身并不提供可靠传输的服务，并且计算首部校验和是一项耗时的操作，因此在IPv6中路由器不再计算首部校验和，从而更快转发IP数据报。l、源IP地址和目的IP地址字段：各占32比特，用来填写发送该IP数据报的源主机的IP地址和接收该IP数据报的目的主机的IP地址。</code></pre><h2 id="网际控制报文协议-ICMP"><a href="#网际控制报文协议-ICMP" class="headerlink" title="网际控制报文协议 ICMP"></a>网际控制报文协议 ICMP</h2><pre><code>a、为了更有效地转发IP数据报和提高交付成功的机会，在网际层使用了网际控制报文协议ICMP(Internet Control Message Protocol)。b、主机或路由器使用ICMP来发送差错报告报文和询问报文。c、ICMP报文被封装在IP数据报中发送。</code></pre><h4 id="1、ICMP-差错报文类型："><a href="#1、ICMP-差错报文类型：" class="headerlink" title="1、ICMP 差错报文类型："></a>1、ICMP 差错报文类型：</h4><pre><code>a、终点不可达：当路由器或主机不能交付数据报时，就向源点发送终点不可达报文。具体可再根据ICMP的代码字段细分为目的网络不可达目的主机不可达、目的协议不可达、目的端口不可达、目的网络未知、目的主机未知等13种错误。b、源点抑制：当路由器或主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送速率放慢。c、时间超过：    (1)当路由器收到一个目的IP地址不是自己的IP数据报，会将其生存时间TTL字段的值减1。若结果不为0，则将该IP数据报转发出去;若结果为0，除丢奔该IP数据报外，还要向源点发送时间超过报文。    (2)另外，当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃，也会向源点发送时间超过报文。d、参数问题：当路由器或目的主机收到IP数据报后，根据其首部中的检验和字段发现首部在传输过程中出现了误码，就丢弃该数据报，并向源点发送参数问题报文。e、改变路由(重定向)：路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器(可通过更好的路由)。</code></pre><h4 id="2、不应发送-ICMP-差错报告报文的情况："><a href="#2、不应发送-ICMP-差错报告报文的情况：" class="headerlink" title="2、不应发送 ICMP 差错报告报文的情况："></a>2、不应发送 ICMP 差错报告报文的情况：</h4><pre><code>a、对ICMP差错报告报文不再发送ICMP差错报告报文；b、对第一个分片的数据报片的所有后续数据报片都不发送ICMP差错报告报文；c、对具有多播地址的数据报都不发送ICMP差错报告报文；d、对具有特殊地址(如127.0.0.0或0.0.0.0)的数据报不发送ICMP差错报告报文。</code></pre><h4 id="3、常见的-ICMP-询问报文："><a href="#3、常见的-ICMP-询问报文：" class="headerlink" title="3、常见的 ICMP 询问报文："></a>3、常见的 ICMP 询问报文：</h4><pre><code>a、回送请求报文和回答报文：    (1)ICMP回送请求报文是由主机或路由器向一个特定的目的主机发出的询问。    (2)收到此报文的主机必须给源主机或路由器发送ICMP回送回答报文。    (3)这种询问报文用来测试目的站是否可达及了解其有关状态。b、时间戳请求报文和回答报文：    (1)ICMP时间戳请求报文是请某个主机或路由器回答当前的日期和时间。    (2)在ICMP时间戳回答报文中有一个32位的字段，其中写入的整数代表从1900年1月1日起到当前时刻一共有多少秒。    (3)这种询问报文用来进行时钟同步和测量时间。</code></pre><h4 id="ICMP-应用："><a href="#ICMP-应用：" class="headerlink" title="ICMP 应用："></a>ICMP 应用：</h4><pre><code>a、分组网间探测PING(Packet InterNet Groper)：    (1)用来测试主机或路由器间的连通性;    (2)应用层直接使用网际层的ICMP(没有通过运输层的TCP或UDP)；    (3)使用ICMP回送请求和回答报文。b、跟踪路由traceroute：    (1)用来测试IP数据报从源主机到达目的主机要经过哪些路由器。    (2)Windows版本:        tracert命令        应用层直接使用网际层ICMP        使用了ICMP回送请求和回答报文以及差错报告报文    (3)Unix版本:        traceroute命令        在运输层使用UDP协议        仅使用ICMP差错报告报文    (4)通过不断发送TTL从1逐渐递增的ICMP回送请求直至到达目的主机实现。</code></pre><h2 id="虚拟专用网-VPN-和网络地址转换-NAT"><a href="#虚拟专用网-VPN-和网络地址转换-NAT" class="headerlink" title="虚拟专用网 VPN 和网络地址转换 NAT"></a>虚拟专用网 VPN 和网络地址转换 NAT</h2><h4 id="1、虚拟专用网-VPN-Virtual-Private-Network-："><a href="#1、虚拟专用网-VPN-Virtual-Private-Network-：" class="headerlink" title="1、虚拟专用网 VPN(Virtual Private Network)："></a>1、虚拟专用网 VPN(Virtual Private Network)：</h4><pre><code>a、利用公用的因特网作为本机构各专用网之间的通信载体，这样的专用网又称为虚拟专用网。由于IPv4地址的紧缺，一个机构能够申请到的IPv4地址数量往往远小于本机构所拥有的主机数量。因此，虚拟专用网中的各主机所分配的地址应该是本机构可自由分配的专用地址而不是需要申请的、在因特网上使用的公有地址。b、无需申请的IPv4私有(专用)地址：    10.0.0.0~10.255.255.255(10/8地址块)    172.16.0.0~172.31.255.255(172.16/12地址块)    192.168.0.0~192.168.255.255(192.168/16地址块)c、私有地址只能用于一个机构内部主机之间的通信，而不能用于和以太网上的主机通信。即私有地址只能用于本地地址而不能用于全球地址。以太网中的所有路由器对目的地址是私有地址的IP数据报一律不进行转发。d、一个机构的内部网络不同地域之间的主机通信：    (1)不同地域的部门至少需要一个拥有合法全球IP地址的路由器，使其各自的专用网能通过公用的以太网通信。    (2)当一个部门的内部主机向另一个部门的内部主机发起通信时，其将待发送的数据封装为内部IP数据报，该数据报首部的源IP地址为发送主机的内部IP，目的地址为通信主机的内部IP，内部IP数据报被发往网关(连接公网的路由器)。    (3)网关收到数据报后，发现其到达目的主机需要通过公网。便将该IP数据报进行加密，确保了内部IP数据报的安全，重新添加数据报的首部，封装为在以太网上发送的外部数据报，其首部的源地址为路由器的全球地址，目的地址为目的主机所在网络网关的全球地址。    (4)目的网关收到该外部数据报后，去掉首部，进行解密，恢复为内部数据报。根据数据报中的目的地址发往相应的主机。e、虚拟专用网也被称为IP隧道技术。</code></pre><h4 id="2、VPN-的类型："><a href="#2、VPN-的类型：" class="headerlink" title="2、VPN 的类型："></a>2、VPN 的类型：</h4><pre><code>a、内联网VPN：同一机构内不同部门的内部网络所构成的虚拟专用网VPN。b、外联网VPN：有时一个机构的VPN需要有某些外部机构(通常就是合作伙伴)参加进来。c、远程接入VPN：在外地工作的员工需要访问公司内部的专用网络时，只要在任何地点接入到因特网，运行驻留在员工PC中的VPN软件，在员工的PC和公司的主机之间建立VPN隧道，即可访问专用网络中的资源。</code></pre><h4 id="3、网络地址转换-NAT-Network-Address-Translation-："><a href="#3、网络地址转换-NAT-Network-Address-Translation-：" class="headerlink" title="3、网络地址转换 NAT(Network Address Translation)："></a>3、网络地址转换 NAT(Network Address Translation)：</h4><pre><code>a、1994年提出了一种网络地址转换NAT的方法再次缓解了IPv4地址空间即将耗尽的问题。NAT能使大量使用内部专用地址的专用网络用户共享少量外部全球地址来访问因特网上的主机和资源。b、装有NAT软件的路由器称为NAT路由器，其至少有一个有效的全球IP地址。c、所有使用私有地址的主机和外界通信时，NAT路由器会将数据报中源地址由原来的私有地址改变为路由器全球IP地址池中的某个全球IP地址；然后将私有地址和全球地址的对应关系记录在NAT转换表中；然后进行转发，此时数据报首部的源地址和目的地址均为全球IP地址；路由器收到外部主机发回的数据报后，在NAT转换表中查找与数据报目的地址对应的私有地址，将数据报目的地址改为对应的私有地址，再进行转发。d、该转换方法存在一个问题:如果NAT路由器具有N个全球IP地址，那么至多只能有N个内网主机能够同时和因特网上的主机通信。e、外网主机不能主动发起对内网主机的通信，因此内网主机不能直接充当服务器，需要网络应用自己使用一些特殊的NAT穿越技术来解决问题。f、由于NAT对外网屏蔽了内网主机的网络地址，能为肉网的主机提供一定的安全保护。</code></pre><h4 id="4、网络地址与端口号转换-NAPT-Network-Address-and-Port-Translation-："><a href="#4、网络地址与端口号转换-NAPT-Network-Address-and-Port-Translation-：" class="headerlink" title="4、网络地址与端口号转换 NAPT(Network Address and Port Translation)："></a>4、网络地址与端口号转换 NAPT(Network Address and Port Translation)：</h4><pre><code>由于绝大多数的网络应用都是使用运输层协议TCP或UDP来传送数据，因此可以利用运输层的端口号和IP地址一起进行转换。这样，用一个全球IP地址就可以使多个拥有本地地址的主机同时和因特网上的主机进行通信。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Learning Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运输层</title>
      <link href="/2025/02/22/%E8%BF%90%E8%BE%93%E5%B1%82/"/>
      <url>/2025/02/22/%E8%BF%90%E8%BE%93%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a><center>运输层</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><pre><code>a、计算机网络体系结构中的物理层、数据链路层以及网络层它们共同解决了将主机通过异构网络互联起来所面临的问题，实现了主机到主机的通信。b、在计算机网络中进行通信的真正实体是位于通信两端主机中的进程。c、运输层的任务是如何为运行在不同主机上的应用进程提供直接的通信服务，运输层协议又称为端到端协议。d、运输层向高层用户屏蔽了下面网络核心的细节(如网络拓扑、所采用的路由选择协议等)，它使应用进程看见的就好像是在两个运输层实体之间有一条端到端的逻辑通信信道。e、根据应用需求的不同，因特网的运输层为应用层提供了两种不同的运输协议，即面向连接的TCP和无连接的UDP。</code></pre><span id="more"></span><h2 id="运输层端口号、复用及分用的概念"><a href="#运输层端口号、复用及分用的概念" class="headerlink" title="运输层端口号、复用及分用的概念"></a>运输层端口号、复用及分用的概念</h2><h4 id="1、端口号："><a href="#1、端口号：" class="headerlink" title="1、端口号："></a>1、端口号：</h4><pre><code>a、运行在计算机上的进程使用进程标识符PID来标志。b、因特网上的计算机并不是使用统一的操作系统，不同的操作系统(windows，Linux，MacOS)又使用不同格式的进程标识符。c、为了使运行不同操作系统的计算机的应用进程之间能够进行网络通信，就必须使用统一的方法对TCP/IP体系的应用进程进行标识。d、TCP/IP体系的运输层使用端口号来区分应用层的不同应用进程。    (1)端口号使用16比特表示，取值范围0~65535:        (a)熟知端口号:0~1023，IANA把这些端口号指派给了TCP/IP体系中最重要的一些应用协议，例如:FTP使用21/20，HTTP使用80，DNS使用53。        (b)登记端口号:1024~49151，为没有熟知端口号的应用程序使用。使用这类端口号必须在IANA按照规定的手续登记，以防止重复。例如:Microsoft RDP微软远程桌面使用的端口是3389。        (c)短暂端口号:49152~65535，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。    (2)端口号只具有本地意义，即端口号只是为了标识本计算机应用层中的各进程，在因特网中，不同计算机中的相同端口号是没有联系的。</code></pre><h4 id="2、发送方的复用与接收方的分用："><a href="#2、发送方的复用与接收方的分用：" class="headerlink" title="2、发送方的复用与接收方的分用："></a>2、发送方的复用与接收方的分用：</h4><pre><code>a、如果某层的一个协议对应直接上层的多个协议/实体，则需要复用/分用。如运输层的UDP协议/TCP协议对应应用层多个端口、网络层的IP协议对应运输层的UDP协议/TCP协议。b、发送端进行多路复用：从多个Socket接收数据，为每块数据封装头部信息，生成Segment，交给网络层。c、接收端进行多路分用：传输层依据头部信息将收到的 Segment交给正确的Socket， 即不同的进程。</code></pre><h4 id="3、TCP-IP-体系的应用层常用协议所使用的运输层熟知端口号："><a href="#3、TCP-IP-体系的应用层常用协议所使用的运输层熟知端口号：" class="headerlink" title="3、TCP&#x2F;IP 体系的应用层常用协议所使用的运输层熟知端口号："></a>3、TCP&#x2F;IP 体系的应用层常用协议所使用的运输层熟知端口号：</h4><p><img src="/images/QQ20250216-220744.png" alt="熟知端口号"></p><h2 id="UDP-和-TCP-的对比"><a href="#UDP-和-TCP-的对比" class="headerlink" title="UDP 和 TCP 的对比"></a>UDP 和 TCP 的对比</h2><h4 id="1、用户数据报协议-UDP-User-Datagram-Protocol"><a href="#1、用户数据报协议-UDP-User-Datagram-Protocol" class="headerlink" title="1、用户数据报协议 UDP(User Datagram Protocol)"></a>1、用户数据报协议 UDP(User Datagram Protocol)</h4><pre><code>a、使用UDP协议通信的双方可随时传输数据，为无连接的；b、UDP支持单播，多播以及广播；c、UDP是面向应用报文的，对上层交付的报文既不合并也不拆分，保留这些报文的边界，添加UDP首部后直接交付下层；d、UDP向上层提供无连接不可靠传输服务，适用于IP电话、视频会议等实时应用；e、UDP数据报仅由首部和数据载荷两部分组成，首部共8字节，分别为源端口、目的端口、长度、检验和4个字段，每个字段2字节。</code></pre><h4 id="2、传输控制协议-TCP-Transmission-Control-Protocol"><a href="#2、传输控制协议-TCP-Transmission-Control-Protocol" class="headerlink" title="2、传输控制协议 TCP(Transmission Control Protocol)"></a>2、传输控制协议 TCP(Transmission Control Protocol)</h4><pre><code>a、使用TCP协议通信的双方，在数据传输前需使用“三报文握手”建立TCP连接，连接建立成功后可进行数据传输，数据传输结束后使用“四报文挥手”释放连接，该链接为逻辑连接，为面向连接的；b、TCP仅支持单播；c、TCP面向字节流，将上层交付的数据块视为比特流，根据发送策略提取一定数量的字节构建TCP报文发送，为实现可靠传输、流量控制、拥塞控制的基础；d、TCP向上层提供面向连接的可靠传输服务，适用于要求可靠传输的应用如文件传输等；e、TCP数据报仅由首部和数据载荷两部分组成，其首部最小长度为20字节，最大长度为60字节。</code></pre><h2 id="TCP-的流量控制"><a href="#TCP-的流量控制" class="headerlink" title="TCP 的流量控制"></a>TCP 的流量控制</h2><pre><code>a、TCP（传输控制协议）的流量控制是一种机制，用于防止发送方向接收方发送过多数据，从而导致接收方的缓冲区溢出。TCP流量控制通过使用滑动窗口协议来实现，它允许接收方根据其可用缓冲区大小来调整发送方的发送速率。b、TCP的分段和重排机制：TCP的分段重排机制，将超过MSS（Maximum segment size）的报文分割为n个单位为MSS的报文段。在发送时，会给每个报文段分配一个序列号（sequence），放在TCP头部，接受方每收到一个报文段会返回一个ack应答，ack的值表示期望收到的下一个报文段编号。其好处为 如果发生丢包, 那么不用将整个报文都重传, 只用重传丢失的那小段报文段。c、TCP的流量控制主要通过以下两个机制实现：    (1)滑动窗口（Sliding Window）：TCP使用滑动窗口来进行流量控制。接收方在TCP报文段的首部中通过&quot;接收窗口&quot;win字段告知自己的可接收数据量，即剩余的缓冲区大小。发送方根据接收方提供的窗口大小来决定发送数据的量，保证接收方能及时处理和接收数据。        (a)发送方维护一个发送窗口，表示可以连续发送的数据量。        (b)接收方维护一个接收窗口，表示还有多少空间可以接收数据。        (c)发送方根据接收方提供的接收窗口大小来动态调整发送窗口的大小，以控制发送的数据量。    (2)基于确认的流量控制：能确保发送方不会超出接收方的处理能力。接收方通过发送确认（ACK）报文来告知发送方已成功接收数据的字节数。发送方根据接收到的确认信息来调整发送数据的速率，避免发送过多的数据。        (a)发送方发送数据后，等待接收方发送确认报文。        (b)接收方收到数据后，发送确认报文，确认已成功接收数据。        (c)发送方根据接收到的确认信息来调整发送窗口和发送速率，以控制数据的发送。d、控制过程：TCP首部有个win字段, 即那个16位窗口大小, 能告诉对方自己接受缓存区当还能接收多少个字节的数据，这样就可以根据接收窗口的大小控制发送速率，达到流量控制的目的。    (1)初始化窗口大小:        在建立TCP连接时，双方协商并初始化流量控制的参数（TCP三次握手时, 接收方会跟据自身处理数据能力和接收缓冲区大小, 告诉发送方自己的接收窗口大小; 发送方据此设置自己的初始化发送窗口大小）。 其中包括窗口大小（通常是以字节为单位的接收缓冲区大小）和初始的拥塞窗口大小。    (2)接收窗口通告:        每次发送数据，接收方通过TCP报文段中的win&quot;窗口大小&quot;字段，通知发送方其当前可接收的字节数。这个窗口大小可以动态调整以反映接收方缓冲区的可用空间。    (3)发送数据，确认等待:        发送方维护一个发送窗口，它表示发送方可以发送的字节数。发送方根据接收方通告的窗口大小，不等一个一个地接收ACK，先把发送窗口内的数据都发送给接收方，但不会超出发送窗口限制，然后收到一个ACK移动一次，直到丢包一直等待收到丢包数据段ACK。    (4)接收数据，动态调整窗口大小,发送ACK:        (a)接收方接收到数据报段后，会返回一个ACK确认报文给接收方，ACK就是他期待收到的下一个数据报的序列号；发送方等待接收方对已发送数据的确认，随后看情况移动窗口。        (b)接收方同时会根据自身的可用缓冲区空间和处理能力，动态调整窗口大小，并将新的窗口大小放在首部win字段中随ACK应答通告给发送方，这样，发送方根据win大小进行数据发送控制。    (5)接收方窗口滑动: 发送方根据接收方的ACK报文和通告窗口大小，将窗口在发送缓冲区中向前滑动。ACK报文有以下几种情况:        (a)如果报文中win=0，发送方停止发送，开启一个定时任务，每隔一段时间，就去询问接受方，直到 win 大于 0，才继续开始发送；        (b)如果接收的ACK值等于接收窗口最左侧的报文段序号, 说明该报文段还没收到、接收方一直期待接收它，窗口停止滑动，直到超时重传或者接收到该报文段的ACK（ACK值为窗口右端下一个报文段序号）。        (c)如果一直在发送请求某个报文段的确认ACK，并且超过三次，或者有报文段超时重传，发送方会假设网络发生拥塞，并采取相应的拥塞控制机制。e、发送窗口=MIN[拥塞窗口，接收窗口]</code></pre><h2 id="TCP-的拥塞控制"><a href="#TCP-的拥塞控制" class="headerlink" title="TCP 的拥塞控制"></a>TCP 的拥塞控制</h2><pre><code>a、在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络性能就要变坏这种情况就叫做拥塞(congestion)b、在计算机网络中的链路容量(即带宽)、交换结点中的缓存和处理机等，都是网络的资源。c、若出现拥塞而不进行控制，整个网络的吞吐量将随输入负荷的增大而下降</code></pre><h4 id="1、吞吐量随负载的变化"><a href="#1、吞吐量随负载的变化" class="headerlink" title="1、吞吐量随负载的变化"></a>1、吞吐量随负载的变化</h4><p><img src="/images/QQ20250217-170901.png" alt="吞吐量随负载的变化"></p><pre><code>a、具有理想拥塞控制的网络，在吞吐量达到饱和之前，网络吞吐量应等于输入的负载，故吞吐量曲线是45°的斜线。但当输入负载超过某一限度时，吞吐量就不再增长而保持水平线。也就是吞吐量达到饱和，这就表明输入的负载中有一部分损失掉了。例如，输入到网络中的某些分组被某个节点丢弃了。虽然如此，网络的吞吐量仍然维持在其所能达到的最大值。b、实际无拥塞控制下，当网络的吞吐量明显地小于理想的吞吐量时，网络就进入了轻度拥塞的状态。当输入负载到达某一数值时，网络的吞吐量反而随着负载的增大而减小，这时网络就进入了拥塞状态。当输入负载继续增大到某一数值时，网络的吞吐量就减小为0，此时网络就无法工作了，这就是所谓的死锁。</code></pre><h4 id="2、慢开始-slow-start-和拥塞避免-congestion-avoidance-："><a href="#2、慢开始-slow-start-和拥塞避免-congestion-avoidance-：" class="headerlink" title="2、慢开始(slow-start)和拥塞避免(congestion avoidance)："></a>2、慢开始(slow-start)和拥塞避免(congestion avoidance)：</h4><pre><code>a、发送方维护一个叫做拥塞窗口cwnd的状态变量，其值取决于网络的拥塞程度，并且动态变化。    (1)拥塞窗口cwnd的维护原则:只要网络没有出现拥塞，拥塞窗口就再增大一些;但只要网络出现拥塞，拥塞窗口就减少一些。    (2)判断出现网络拥塞的依据:没有按时收到应当到达的确认报文(即发生超时重传).b、发送方将拥塞窗口作为发送窗口swnd，即swnd=cwnd。c、维护一个慢开始门限ssthresh状态变量:    (1)当cwnd &lt; ssthresh时，使用慢开始算法;    (2)当cwnd &gt; ssthresh时，停止使用慢开始算法而改用拥塞避免算法;    (3)当cwnd = ssthresh时，既可使用慢开始算法，也可使用拥塞避免算法。d、慢开始过程：    慢开始是建立TCP连接后，采用的第一个调整发送速率的算法（或叫模式）。在这个阶段，cwnd通常被初始化为1MSS，这个值比较小，在这个时候，网络一般还有足够的富余，而慢开始的目的就是尽快找到上限。在慢开始阶段，发送方每接收到一个确认报文，就会将cwnd增加1MSS的大小，于是：        初始cwnd=1MSS，所以可以发送一个TCP最大报文段，成功确认后，cwnd = 2MSS；        此时可以发送两个TCP最大报文段，成功接收后，cwnd = 4 MSS；        此时可以发送四个TCP最大报文段，成功接收后，cwnd = 8 MSS......      由于TCP是一次性将窗口内的所有报文发出，所以所有报文都到达并被确认的时间，近似的等于一个RTT。所以在这个阶段，拥塞窗口cwnd的长度将在每个RTT后翻倍，也就是发送速率将以指数级别增长。在此期间，若cwnd增加到预设的ssthresh时，停止使用慢开始算法，转而使用避免拥塞算法。e、避免拥塞过程：    拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口按线性规律缓慢增长。f、在执行慢开始算法和拥塞避免算法的任意一个阶段，若有TCP报文的超时重传计时器超时，则判断网络可能出现拥塞。此时将ssthresh值更新为发生拥塞时cwnd值的一半;将cwnd值减少为1，并重新开始执行慢开始算法。g、“慢开始”是指一开始向网络注入的报文段少，并不是指拥塞窗口cwnd增长速度慢;“拥塞避免”并非指完全能够避免拥塞，而是指在拥塞避免阶段将拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞;</code></pre><h4 id="3、快重传-fast-retransmit-和快恢复-fast-recovery"><a href="#3、快重传-fast-retransmit-和快恢复-fast-recovery" class="headerlink" title="3、快重传(fast retransmit)和快恢复(fast recovery)"></a>3、快重传(fast retransmit)和快恢复(fast recovery)</h4><pre><code>a、慢开始和拥塞避免算法是1988年提出的TCP拥塞控制算法(TCPTahoe版本)b、1990年又增加了两个新的拥塞控制算法(改进TCP的性能)，这就是快重传和快恢复(TCP Reno版本):    (1)有时，个别报文段会在网络中丢失，但实际上网络并未发生拥塞。这将导致发送方超时重传，并误认为网络发生了拥塞;    (2)发送方把拥塞窗口cwnd又设置为最小值1，并错误地启动慢开始算法，因而降低了传输效率.c、采用快重传算法可以让发送方尽早知道发生了个别报文段的丢失。d、所谓快重传，就是使发送方尽快进行重传，而不是等超时重传计时器超时再重传：    (1)要求接收方不要等待自己发送数据时才进行捎带确认，而是要立即发送确认;    (2)即使收到了失序的报文段也要立即发出对已收到的报文段的重复确认。    (3)发送方一旦收到3个连续的重复确认，就将相应的报文段立即重传，而不是等该报文段的超时重传计时器超时再重传。    (4)对于个别丢失的报文段，发送方不会出现超时重传，也就不会误认为出现了拥塞(进而降低拥塞窗口cwnd为1)。使用快重传可以使整个网络的吞吐量提高约20%。e、发送方一旦收到3个重复确认，就知道现在只是丢失了个别的报文段。于是不启动慢开始算法，而执行快恢复算法：    (1)发送方将慢开始门限ssthresh值和拥塞窗口cwnd值调整为当前窗口的一半;开始执行拥塞避免算法。    (2)也有的快恢复实现是把快恢复开始时的拥塞窗口cwnd值再增大一些，即等于新的ssthresh +3.        (a)既然发送方收到3个重复的确认，就表明有3个数据报文段已经离开了网络;        (b)这3个报文段不再消耗网络资源而是停留在接收方的接收缓存中;        (c)可见现在网络中不是堆积了报文段而是减少了3个报文段。因此可以适当把拥塞窗口扩大些。</code></pre><h2 id="TCP-超时重传时间的选择"><a href="#TCP-超时重传时间的选择" class="headerlink" title="TCP 超时重传时间的选择"></a>TCP 超时重传时间的选择</h2><pre><code>a、不能直接使用某次测量得到的RTT样本来计算超时重传时间RTO。b、利用每次测量得到的RTT样本，计算加权平均往返时间RTTs(又称为平滑的往返时间)：    (1)RTTs1= RTT1    (2)新的RTTs=(1-α) x 旧的RTTs + α x 新的RTT样本c、在上式中，0≤α&lt;1:    (1)若 α 很接近于0，则新RTT样本对RTTs的影响不大;    (2)若 α 很接近于1，则新RTT样本对RTTs的影响较大，    (3)已成为建议标准的RFC6298推荐的α值为1/8，即0.125.d、用这种方法得出的加权平均往返时间RTTS就比测量出的RTT值更加平滑。e、显然，超时重传时间RTO应略大于加权平均往返时间RTTS。f、RFC6298建议使用下式计算超时重传时间RTO:    RTO=RTTs + 4 x RTTdg、RTT偏差的加权平均RTTd:    (1)RTTd1 = RTT1 / 2    (2)新的RTTd = (1-B) x 旧的RTTd + B x | RTTs - 新的RTT样本 |    (3)0≤B&lt;1    (4)已成为建议标准的RFC6298推荐的B值为1/4，即0.25。h、针对出现超时重传时无法测准往返时间RTT的问题，Karn提出了一个算法:在计算加权平均往返时间RTTS时，只要报文段重传了，就不采用其往返时间RTT样本。也就是出现重传时，不重新计算RTTS，进而超时重传时间RTO也不会重新计算。这又引起了新的问题。设想出现这样的情况:报文段的时延突然增大了很多，并且之后很长一段时间都会保持这种时延。因此在原来得出的重传时间内，不会收到确认报文段。于是就重传报文段。但根据Karn算法，不考虑重传的报文段的往返时间样本。这样，超时重传时间就无法更新。这会导致报文段反复被重传。因此，要对Karn算法进行修正。方法是:报文段每重传一次，就把超时重传时间RTO增大一些。典型的做法是将新RTO的值取为旧RTO值的2倍。</code></pre><h2 id="TCP-可靠传输的实现"><a href="#TCP-可靠传输的实现" class="headerlink" title="TCP 可靠传输的实现"></a>TCP 可靠传输的实现</h2><h4 id="1、TCP-基于以字节为单位的滑动窗口来实现可靠传输"><a href="#1、TCP-基于以字节为单位的滑动窗口来实现可靠传输" class="headerlink" title="1、TCP 基于以字节为单位的滑动窗口来实现可靠传输"></a>1、TCP 基于以字节为单位的滑动窗口来实现可靠传输</h4><pre><code>a、发送方仅允许发送窗口内的数据字节；发送窗口后沿外是以发送并收到确认的数据字节序号，可以从发送缓存中删除；发送窗口前沿外为当前不允许发送的数据字节的序号。b、后沿的移动情况：    (1)不动：没有收到新的确认；    (2)前移：收到了新的确认。c、前沿移动的情况：    (1)通常情况下不断前移；    (2)不动：没有收到新的确认，对方通知的窗口大小也没有改变；收到新的确认但对方通知的窗口大小缩小，使前沿正好不动。    (3)向后收缩：对方通知窗口缩小。TCP标准不建议，因发送方在收到通知之前很可能已发送了许多数据。d、发送窗口状态的描述：使用三个指针P1，P2，P3分别指向相应的字节序号：    (1)小于P1的是已发送并已收到确认的部分;    (2)大于等于P3的是不允许发送的部分;    (3)P3-P1=发送窗口的尺寸;    (4)P2-P1=已发送但尚未收到确认的字节数;    (5)P3-P2=允许发送但当前尚未发送的字节数(又称为可用窗口或有效窗口)。e、接收方仅允许接收接收窗口内的数据字节，仅能将按序到达的数据交付上层；接收窗口前的为已发送过确认并已交付主机；窗口后的序号不允许接收数据。</code></pre><h4 id="2、虽然发送方的发送窗口是根据接收方的接收窗口设置的，但在同一时刻，发送方的发送窗口并不总是和接收方的接收窗口一样大。"><a href="#2、虽然发送方的发送窗口是根据接收方的接收窗口设置的，但在同一时刻，发送方的发送窗口并不总是和接收方的接收窗口一样大。" class="headerlink" title="2、虽然发送方的发送窗口是根据接收方的接收窗口设置的，但在同一时刻，发送方的发送窗口并不总是和接收方的接收窗口一样大。"></a>2、虽然发送方的发送窗口是根据接收方的接收窗口设置的，但在同一时刻，发送方的发送窗口并不总是和接收方的接收窗口一样大。</h4><pre><code>a、网络传送窗口值需要经历一定的时间滞后，并且这个时间还是不确定的。b、发送方还可能根据网络当时的拥塞情况适当减小自己的发送窗口尺寸。</code></pre><h4 id="3、对于不按序到达的数据应如何处理，TCP-并无明确规定。"><a href="#3、对于不按序到达的数据应如何处理，TCP-并无明确规定。" class="headerlink" title="3、对于不按序到达的数据应如何处理，TCP 并无明确规定。"></a>3、对于不按序到达的数据应如何处理，TCP 并无明确规定。</h4><pre><code>a、如果接收方把不按序到达的数据一律丢弃，那么接收窗口的管理将会比较简单，但这样做对网络资源的利用不利因为发送方会重复传送较多的数据。b、TCP通常对不按序到达的数据是先临时存放在接收窗口中，等到字节流中所缺少的字节收到后，再按序交付上层的应用进程。</code></pre><h4 id="4、TCP-要求接收方必须有累积确认和捎带确认机制，这样可以减小传输开销。接收方可以在合适的时候发送确认，也可以在自己有数据要发送时把确认信息顺便捎带上。"><a href="#4、TCP-要求接收方必须有累积确认和捎带确认机制，这样可以减小传输开销。接收方可以在合适的时候发送确认，也可以在自己有数据要发送时把确认信息顺便捎带上。" class="headerlink" title="4、TCP 要求接收方必须有累积确认和捎带确认机制，这样可以减小传输开销。接收方可以在合适的时候发送确认，也可以在自己有数据要发送时把确认信息顺便捎带上。"></a>4、TCP 要求接收方必须有累积确认和捎带确认机制，这样可以减小传输开销。接收方可以在合适的时候发送确认，也可以在自己有数据要发送时把确认信息顺便捎带上。</h4><pre><code>a、接收方不应过分推迟发送确认，否则会导致发送方不必要的超时重传，这反而浪费了网络的资源。TCP标准规定，确认推迟的时间不应超过0.5秒。若收到一连串具有最大长度的报文段，则必须每隔一个报文段就发送一个确认[RFC 11221]。b、捎带确认实际上并不经常发生，因为大多数应用程序很少同时在两个方向上发送数据。</code></pre><h4 id="5、TCP-的通信是全双工通信。通信中的每一方都在发送和接收报文段。因此，每一方都有自己的发送窗口和接收窗口。在谈到这些窗口时，一定要弄清楚是哪一方的窗口。"><a href="#5、TCP-的通信是全双工通信。通信中的每一方都在发送和接收报文段。因此，每一方都有自己的发送窗口和接收窗口。在谈到这些窗口时，一定要弄清楚是哪一方的窗口。" class="headerlink" title="5、TCP 的通信是全双工通信。通信中的每一方都在发送和接收报文段。因此，每一方都有自己的发送窗口和接收窗口。在谈到这些窗口时，一定要弄清楚是哪一方的窗口。"></a>5、TCP 的通信是全双工通信。通信中的每一方都在发送和接收报文段。因此，每一方都有自己的发送窗口和接收窗口。在谈到这些窗口时，一定要弄清楚是哪一方的窗口。</h4><h2 id="TCP-的运输连接管理"><a href="#TCP-的运输连接管理" class="headerlink" title="TCP 的运输连接管理"></a>TCP 的运输连接管理</h2><pre><code>a、TCP是面向连接的协议，它基于运输连接来传送TCP报文段。b、TCP运输连接的建立和释放是每一次面向连接的通信中必不可少的过程。c、TCP运输连接有以下三个阶段：    (1)建立TCP连接；    (2)数据传送；    (3)释放TCP连接。d、TCP的运输连接管理就是使运输连接的建立和释放都能正常地进行。</code></pre><h4 id="1、TCP-的连接建立："><a href="#1、TCP-的连接建立：" class="headerlink" title="1、TCP 的连接建立："></a>1、TCP 的连接建立：</h4><pre><code>a、TCP的连接建立要解决以下三个问题：    (1)使TCP双方能够确知对方的存在；    (2)使TCP双方能够协商一些参数（如最大窗口值、是否使用窗口扩大选项和时间戳选项以及服务质量等）；    (3)使TCP双方能够对运输实体资源（如缓存大小、连接表中的项目等）进行分配。b、连接建立过程：    (1)最开始的时候客户端和服务器都是处于CLOSED关闭状态。主动打开连接的为客户端，被动打开连接的是服务器。    (2)TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了 LISTEN 监听状态。    (3)第一次握手：TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位SYN=1，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT 同步已发送状态。    (4)第二次握手：TCP服务器收到请求报文后，如果同意连接，则会向客户端发出确认报文。确认报文中应该 ACK=1，SYN=1，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了 SYN-RCVD 同步收到状态；    (5)第三次握手：TCP客户端收到确认后，还要向服务器给出确认。确认报文的ACK=1，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED已建立连接状态触发三次握手。</code></pre><p><img src="/images/QQ20250217-211150.png" alt="三次握手"></p><pre><code>c、三次握手的目的：    第一次握手： 客户端向服务器端发送报文证明客户端的发送能力正常。    第二次握手：服务器端接收到报文并向客户端发送报文证明服务器端的接收能力、发送能力正常。    第三次握手：客户端向服务器发送报文证明客户端的接收能力正常。d、若采用两次握手产生的错误情况：客户端向服务器端发送的请求报文由于网络等原因滞留，未能发送到服务器端，此时连接请求报文失效，客户端会再次向服务器端发送请求报文，之后与服务器端建立连接，当连接释放后，由于网络通畅了，第一次客户端发送的请求报文又突然到达了服务器端，这条请求报文本该失效了，但此时服务器端误认为客户端又发送了一次连接请求，两次握手建立好连接，此时客户端忽略服务器端发来的确认，也不发送数据，造成不必要的错误和网络资源的浪费。如果采用三次握手的话，就算那条失效的报文发送到服务器端，服务器端确认并向客户端发送报文，但此时客户端不会发出确认，由于客户端没有确认，由于服务器端没有接收到确认，就会知道客户端没有请求连接。e、注意：    （1）TCP的标准规定，SYN=1的报文段不能携带数据，但要消耗掉一个序号。    （2）TCP的标准规定，普通的确认报文段如果不携带数据，则不消耗序号。</code></pre><h4 id="2、TCP-连接的释放："><a href="#2、TCP-连接的释放：" class="headerlink" title="2、TCP 连接的释放："></a>2、TCP 连接的释放：</h4><pre><code>a、释放的过程：    (1)数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，然后客户端主动关闭，服务器被动关闭。    (2)第一次挥手：客户端发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，ACK=1，其序列号为seq=u(等于前面已经传送过来的数据的最后一个字节的序号加1)，ack=v，v的值为客户端收到的上一个数据报文序号+1。此时，客户端进入FIN-WAIT-1(终止等待1)状态。    (3)第二次挥手：服务器端接收到连接释放报文后，发出TCP普通确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT关闭等待状态，客户端对服务器的连接已断开，仅剩下服务器对客户端的单向连接，客户端已没有数据要发送，服务器还可向客户端发送数据。    (4)第三次挥手：客户端接收到服务器端的确认请求后，客户端就会进入FIN-WAIT-2(终止等待2)状态，等待服务器发送连接释放报文，服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ACK=1，seq=w，w为服务端上次发送数据报文的序号+1，ack仍为u+1，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。    (5)第四次挥手：客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，这是因为TCP客户进程之前发送的TCP连接释放报文段虽然不携带数据，但要消耗一个序号。此时，客户端就进入了TIME-WAIT(时间等待)状态，但此时TCP连接还未终止，必须要经过2MSL后（最长报文寿命），当客户端撤销相应的TCB后，客    户端才会进入CLOSED关闭状态，服务器端接收到确认报文后，会立即进入CLOSED关闭状态，到这里TCP连接就断开了，四次挥手完成。b、MSL(MaximumSegmentLifetime)意思是最长报文段寿命，RFC793建议为2分钟。</code></pre><p><img src="/images/QQ20250217-215126.png" alt="四次挥手"></p><pre><code>c、客户端要等待2MSL的原因：    主要原因是为了保证客户端第四次挥手发送的ACK报文能到到服务器，因为这个ACK报文可能丢失，导致服务器超时重传，而若此时客户端已关闭，则导致服务器对客户端的TCP连接无法关闭，消耗服务器资源；并且2MSL是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃，这样新的连接中不会出现旧连接的请求报文。d、服务器如何发现客户端故障：    (1)TCP服务器进程每收到一次TCP客户进程的数据，就重新设置并启动保活计时器（2小时定时）。    (2)若保活计时器定时周期内未收到TCP客户进程发来的数据，则当保活计时器到时后，TCP服务器进程就向TCP客户进程发送一个探测报文段，以后则每隔75秒钟发送一次。若一连发送10个探测报文段后仍无TCP客户进程的响应，TCP服务器进程就认为TCP客户进程所在主机出了故障，接着就关闭这个连接。</code></pre><h2 id="TCP-报文首部格式"><a href="#TCP-报文首部格式" class="headerlink" title="TCP 报文首部格式"></a>TCP 报文首部格式</h2><pre><code>a、为了实现可靠传输，TCP采用了面向字节流的方式。b、但TCP在发送数据时，是从发送缓存取出一部分或全部字节并给其添加一个首部使之成为TCP报文段后进行发送。    (1)一个TCP报文段由首部和数据载荷两部分构成；    (2)TCP的全部功能都体现在它首部中各字段的作用。</code></pre><h4 id="首部格式"><a href="#首部格式" class="headerlink" title="首部格式"></a>首部格式</h4><p><img src="/images/QQ20250217-222619.png" alt="首部格式"></p><pre><code>a、TCP报文首部以32bit即4字节为单位，前20字节为固定首部，最大可有40字节的扩展，即最小20字节、最大60字节。b、源端口字段：占16比特，写入源端口号，用来标识发送该TCP报文段的应用进程。c、目的端口字段：占16比特，写入目的端口号，用来标识接收该TCP报文段的应用进程。d、序号字段、确认号字段、确认标志位ACK字段：与TCP实现可靠传输相关。    (1)序号字段：占32比特，取值范围[0,2^32-1]，序号增加到最后一个后，下一个序号就又回到0。指出本TCP报文段数据载荷的第一个字节的序号，而不是其内容。    (2)确认号字段：占32比特，取值范围[0,2^32-1]，确认号增加到最后一个后，下一个确认号就又回到0。指出期望收到对方下一个TCP报文段的数据载荷的第一个字节的序号，同时也是对之前收到的所有数据的确认即对对方序号字段的确认。若确认号=n，则表明到序号n-1为止的所有数据都已正确接收，期望接收序号为n的数据。    (3)确认标志位ACK字段：取值为1时确认号字段才有效；取值为0时确认号字段无效。TCP规定，在连接建立后所有传送的TCP报文段都必须把ACK置1。e、数据偏移字段：占4比特，并以4字节为单位。用来指出TCP报文段的数据载荷部分的起始处距离TCP报文段的起始处有多远。这个字段实际上是指出了TCP报文段的首部长度。首部固定长度为20字节，因此数据偏移字段的最小值为(0101)2；首部最大长度为60字节，因此数据偏移字段的最大值为(1111)2。f、保留字段：占6比特，保留为今后使用，但目前应置为0。g、窗口字段：占16比特，以字节为单位。指出发送本报文段的一方的接收窗口。窗口值作为接收方让发送方设置其发送窗口的依据。这是以接收方的接收能力来控制发送方的发送能力，称为流量控制。h、校验和字段：占16比特，检查范围包括TCP报文段的首部和数据载荷两部分。在计算校验和时，要在TCP报文段的前面加上12字节的伪首部。i、同步标志位SYN字段：在TCP连接建立时用来同步序号。报文首部中该字段被置1表明该报文为一个TCP连接请求报文段。j、终止标志位FIN字段：用来释放TCP连接。报文首部中该字段被置1表明该报文为一个TCP连接释放报文段。k、复位标志位RST字段：用来复位TCP连接。当RST=1时，表明TCP连接出现了异常，必须释放连接，然后再重新建立连接。RST置1还用来拒绝一个非法的报文段或拒绝打开一个TCP连接。l、推送标志位PSH字段：接收方的TCP收到该标志位为1的报文段会尽快上交应用进程，而不必等到接收缓存都填满后再向上交付。m、紧急标志位URG字段、紧急指针字段：用来实现紧急操作。当发送方有紧急数据时，可将紧急数据插队到发送缓存的最前面，并立刻封装到一个TCP报文段中进行发送。紧急指针会指出本报文段数据载荷部分包含了多长的紧急数据，紧急数据之后是普通数据。    (1)紧急标志位URG字段：取值为1时紧急指针字段有效；取值为0时紧急指针字段无效。    (2)紧急指针：占16比特，以字节为单位，用来指明紧急数据的长度。n、选项字段(长度可变)：增加选项可以增加TCP报文的功能    (1)最大报文段长度MSS选项：指出TCP报文段数据载荷部分的最大长度。    (2)窗口扩大选项：为了扩大窗口（提高吞吐率）。    (3)时间戳选项：        (a)用来计算往返时间RTT。        (b)用于处理序号超范围的情况，又称为防止序号绕回PAWS。    (4)选择确认选项：用来实现选择确认功能。o、填充字段：由于选项的长度可变，因此使用填充来确保报文段首部能被4整除（因为数据偏移字段，也就是首部长度字段，是以 4 字节为单位的）。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Learning Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据链路层</title>
      <link href="/2025/02/22/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/2025/02/22/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a><center>数据链路层</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><pre><code>链路(Link)：从一个结点到相邻结点的一段物理线路，中间没有其他交换结点数据链路(Data Link)：将实现通信协议的硬件和软件加到链路上，构成数据链路数据链路层以帧为单位传输和处理数据</code></pre><span id="more"></span><h4 id="数据链路层三个重要问题"><a href="#数据链路层三个重要问题" class="headerlink" title="数据链路层三个重要问题"></a>数据链路层三个重要问题</h4><h5 id="1、封装成帧：将网络层交付的协议数据单元添加帧头和帧尾，将其封装成帧"><a href="#1、封装成帧：将网络层交付的协议数据单元添加帧头和帧尾，将其封装成帧" class="headerlink" title="1、封装成帧：将网络层交付的协议数据单元添加帧头和帧尾，将其封装成帧"></a>1、封装成帧：将网络层交付的协议数据单元添加帧头和帧尾，将其封装成帧</h5><h5 id="2、差错检测：发送方在发送之前基于数据和检错算法计算出检错码，并将其封装在帧尾；接收方收到后通过检错码和检错算法可判断传输过程中是否出现误码"><a href="#2、差错检测：发送方在发送之前基于数据和检错算法计算出检错码，并将其封装在帧尾；接收方收到后通过检错码和检错算法可判断传输过程中是否出现误码" class="headerlink" title="2、差错检测：发送方在发送之前基于数据和检错算法计算出检错码，并将其封装在帧尾；接收方收到后通过检错码和检错算法可判断传输过程中是否出现误码"></a>2、差错检测：发送方在发送之前基于数据和检错算法计算出检错码，并将其封装在帧尾；接收方收到后通过检错码和检错算法可判断传输过程中是否出现误码</h5><h5 id="3、可靠传输：确保接收方能准确接收发送方发送的数据"><a href="#3、可靠传输：确保接收方能准确接收发送方发送的数据" class="headerlink" title="3、可靠传输：确保接收方能准确接收发送方发送的数据"></a>3、可靠传输：确保接收方能准确接收发送方发送的数据</h5><h2 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h2><pre><code>帧头、帧尾：包含重要控制信息，如源地址、目的地址、类型等；用于帧定界帧定界：用于接收方在bit流中提取一个个帧透明传输：数据链路层对上层交付的传输数据没有任何限制    a、面向字节的物理链路：使用字节填充(或称字符填充)的方法实现透明传输，即发送方在传输前扫描数据，在每一个帧定界符或转义字符前添加一个转义字符    b、面向比特的物理链路：使用比特填充的方法实现透明传输。例，若帧定界标志为01111110，则在数据中每五个连续的1后面添加一位0为提高帧的传输效率，应当使帧的数据部分尽可能大最大传输单元MTU：帧的数据部分长度上限</code></pre><h2 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h2><pre><code>比特差错：传输过程中bit0变为1，1变为0误码率BER(Bit Error Rate)：在一段时间内，传输错误的bit占bit总数的比率差错检测码：检测传输过程中是否产生比特差错    帧检验序列FCS字段：位于帧尾的差错检测码    检错码只能检测是否出现误码，无法定位错误，因而无法纠正错误    若想纠正可用冗余信息更多的纠错码进行向前纠错，但其开销较大，在计算机网络中较少使用</code></pre><h4 id="奇偶校验：在待发送的数据后添加一位奇偶校验位，使整个数据的-1-的个数为奇数-奇校验-或偶数-偶校验"><a href="#奇偶校验：在待发送的数据后添加一位奇偶校验位，使整个数据的-1-的个数为奇数-奇校验-或偶数-偶校验" class="headerlink" title="奇偶校验：在待发送的数据后添加一位奇偶校验位，使整个数据的 1 的个数为奇数(奇校验)或偶数(偶校验)"></a>奇偶校验：在待发送的数据后添加一位奇偶校验位，使整个数据的 1 的个数为奇数(奇校验)或偶数(偶校验)</h4><pre><code>若有奇数个位发生误码，则奇偶性发生变化，可以检验出误码；若有偶数个位发生误码，则奇偶性不变，发生漏检</code></pre><h4 id="循环冗余校验-CRC：收发双方约定好一个生成多项式-G-x-；发送方基于待发送数据和生成多项式计算出差错检测码-冗余码-，将其添加到传输数据尾部一并传输；接收方通过生成多项式计算接收的数据是否产生误码"><a href="#循环冗余校验-CRC：收发双方约定好一个生成多项式-G-x-；发送方基于待发送数据和生成多项式计算出差错检测码-冗余码-，将其添加到传输数据尾部一并传输；接收方通过生成多项式计算接收的数据是否产生误码" class="headerlink" title="循环冗余校验 CRC：收发双方约定好一个生成多项式 G(x)；发送方基于待发送数据和生成多项式计算出差错检测码(冗余码)，将其添加到传输数据尾部一并传输；接收方通过生成多项式计算接收的数据是否产生误码"></a>循环冗余校验 CRC：收发双方约定好一个生成多项式 G(x)；发送方基于待发送数据和生成多项式计算出差错检测码(冗余码)，将其添加到传输数据尾部一并传输；接收方通过生成多项式计算接收的数据是否产生误码</h4><pre><code>发送方：在待发送的数据后添加生成多项式最高次个0作为被除数；将生成多项式各项系数构成的比特串作为除数；商作为标记防止计算过程出现错位；余数为冗余码，长度与生成多项式最高次数相同接收方：将接收到的数据作为被除数；将生成多项式各项系数构成的比特串作为除数；若余数为0，则传输过程中没有产生误码，若不为0则产生误码CRC有良好的检错能力，漏检率极低，已于硬件实现，因而广泛用于数据链路层</code></pre><h2 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h2><pre><code>一般情况下，有线链路误码率较低，不要求数据链路层向上提供可靠传输服务，即使产生误码可靠传输问题由上层解决；无线链路易受干扰，误码率较高，要求数据链路层向上层提供可靠传输服务</code></pre><h4 id="数据链路层向上层提供的服务类型"><a href="#数据链路层向上层提供的服务类型" class="headerlink" title="数据链路层向上层提供的服务类型"></a>数据链路层向上层提供的服务类型</h4><pre><code>a、不可靠传输服务：仅丢弃有误码的帧，什么都不做b、可靠传输服务：实现发送什么接收什么</code></pre><h4 id="传输差错"><a href="#传输差错" class="headerlink" title="传输差错"></a>传输差错</h4><pre><code>1、分组丢失2、分组失序3、分组重复这些传输差错出现在数据链路层的上层，比特差错出现在数据链路层</code></pre><h2 id="可靠传输实现机制"><a href="#可靠传输实现机制" class="headerlink" title="可靠传输实现机制"></a>可靠传输实现机制</h2><h4 id="1、停止-等待协议-SW：发送方每次发送一个数据分组，接收方接收后对其进行差错检测，若无误码则向发送方发送一个确认分组-ACK，发送方收到后才可继续发送下一个数据分组。-自动请求重传协议-ARQ"><a href="#1、停止-等待协议-SW：发送方每次发送一个数据分组，接收方接收后对其进行差错检测，若无误码则向发送方发送一个确认分组-ACK，发送方收到后才可继续发送下一个数据分组。-自动请求重传协议-ARQ" class="headerlink" title="1、停止-等待协议 SW：发送方每次发送一个数据分组，接收方接收后对其进行差错检测，若无误码则向发送方发送一个确认分组 ACK，发送方收到后才可继续发送下一个数据分组。(自动请求重传协议 ARQ)"></a>1、停止-等待协议 SW：发送方每次发送一个数据分组，接收方接收后对其进行差错检测，若无误码则向发送方发送一个确认分组 ACK，发送方收到后才可继续发送下一个数据分组。(自动请求重传协议 ARQ)</h4><pre><code>a、若接收方发现数据出现误码，则将其抛弃，并向发送方发送否认分组NAK；发送方收到否认分组后重新发送数据分组。b、超时重传：若发送方发送的数据分组在传输过程中丢失，则无法收到接收方的确认分组或否认分组。此时发送方需要设置一个超时计数器，若发送方的等待时间超过设置的重传时间，则重传原来的分组，该过程称为超时重传。重传时间一般略大于发送方到接收方的平均往返时间。c、确认丢失：若接收方的确认分组ACK在传输过程中丢失，则发送方会因为超时重传重新发送分组，此时接收方会接受到一个与先前相同的数据分组。为区分不同的数据分组，由于停止-等待协议每次只发送一个分组，则只需要1bit即可区分当前分组与上一个分组；当接受方第二次接受到数据分组0时，则只会向发送方返回一个确认分组，而不接受数据，避免了数据的重复，发送方收到确认分组后，继续发送数据分组1。d、确认迟到：若接受方发送的确认分组ACK延迟到达，超过了发送方的重传时间，则同样引起发送方的超时重传数据分组0，此时确认分组到达，发送方继续发送数据分组1；接收方重复收到数据分组0后仅返回确认分组ACK，而此时发送方无法区别此确认分组是针对重传的数据分组0还是新发送的数据分组1。为区分不同的确认分组，也可使用1bit来对确认分组ACK进行编号，发送方收到确认分组ACK0后知道其针对重新发送的数据分组0，对其忽略，等待确认分组ACK1。（数据链路层一般不会出现ACK分组迟到，可不对ACK分组编码）e、停止-等待协议的信道利用率U=数据分组的发送时延TD/(发送时延TD+收发双方往返时间RTT+确认分组发送时延TA)。因此当RTT远大于TD时，信道利用率很低。</code></pre><h4 id="2、回退-N-帧协议-GBN：采用-n-个-bit-给待发送的数据分组循环编号，0-2-n-1，1"><a href="#2、回退-N-帧协议-GBN：采用-n-个-bit-给待发送的数据分组循环编号，0-2-n-1，1" class="headerlink" title="2、回退 N 帧协议 GBN：采用 n 个 bit 给待发送的数据分组循环编号，0~2^n-1，1&lt;发送窗口 Wt&lt;&#x3D;2^n-1，接收窗口 Wr 的取值为 1。发送方仅允许发送发送窗口内的数据分组，依次连续发送；接收方仅允许在接收窗口接收数据，每接收一个数据分组窗口向后滑动一个位置，保证接收的分组序号和发送的分组序号相对应，同时给发送方发送所接收分组的确认分组；发送方每接收一个确认分组，发送窗口就向后滑动一个位置。(滑动窗口协议)"></a>2、回退 N 帧协议 GBN：采用 n 个 bit 给待发送的数据分组循环编号，0~2^n-1，1&lt;发送窗口 Wt&lt;&#x3D;2^n-1，接收窗口 Wr 的取值为 1。发送方仅允许发送发送窗口内的数据分组，依次连续发送；接收方仅允许在接收窗口接收数据，每接收一个数据分组窗口向后滑动一个位置，保证接收的分组序号和发送的分组序号相对应，同时给发送方发送所接收分组的确认分组；发送方每接收一个确认分组，发送窗口就向后滑动一个位置。(滑动窗口协议)</h4><pre><code>a、累计确认：接收方不一定对收到的分组逐个发送确认分组，而是在收到几个分组后对按序到达的最后一个数据分组发送确认分组ACKn，表示序号n及以前的数据分组都已正确接收；发送方收到确认分组后直接将发送窗口向后移动n个位置。(累计确认使得即使确认分组丢失，发送方也可能不重传，即最后到达的确认分组包含了丢失的确认分组)b、有差错情况：发送方发送连续n个分组，接受方在收到的第一个分组检测出了误码，将其丢弃，而由于接收到的第二个分组序号与接收窗口的序号不匹配，接收方无法正确接收，全部分组被丢弃，接收方每丢弃一个分组即向发送方发送一个因先前正确接收的数据分组而发送的ACK，发送方根据接收到的重复ACK的数量或是等待超时重新发送发送窗口内的全部分组。(即回退N帧)c、当Wt为1时，发送窗口大小为1个数据分组，即停止-等待协议；当Wt大于2^n-1时，可能导致接收方无法分辨新旧数据分组d、回退N帧协议在流水线传输的基础上利用发送窗口限制连续发送的数据分组的数量，是一种连续的ARQ协议。当通信线路质量不好时，其信道利用率不比停止-等待协议高。</code></pre><h4 id="3、选择重传协议-SR：接收窗口的尺寸大于-1，以便接收方接收失序但无误码且序号落在接收窗口内的数据分组。"><a href="#3、选择重传协议-SR：接收窗口的尺寸大于-1，以便接收方接收失序但无误码且序号落在接收窗口内的数据分组。" class="headerlink" title="3、选择重传协议 SR：接收窗口的尺寸大于 1，以便接收方接收失序但无误码且序号落在接收窗口内的数据分组。"></a>3、选择重传协议 SR：接收窗口的尺寸大于 1，以便接收方接收失序但无误码且序号落在接收窗口内的数据分组。</h4><pre><code>a、采用n个bit给待发送的数据分组循环编号，0~2^n-1，发送窗口Wt的尺寸为1&lt;Wt&lt;2^(n-1)，接收窗口Wr的尺寸小于等于Wt。b、发送方连续发送发送窗口内的n个数据分组，接收方每接收一个分组向发送方发送所接收的数据分组的确认分组ACK(采用逐一确认而不是累计确认)。若该连续的数据分组中的某一个数据分组丢失或误码，此时接收方仅接收无误码且序号在接收窗口内的数据分组，无论是否有序，然后发送相应的确认分组，若未正确接收的数据分组前有m个分组正确接收，则接收窗口向后移动m个位置(无论未正确接收分组后有多少个正确接收的分组，即窗口停留在未正确接收的分组序号处)；发送方收到m个正确接收的确认分组后，发送窗口向后移动m个位置，此时有m个新的分组被发送窗口包括，发送方将新的数据分组发送给接收方，若此时收到接收方未正确接收分组后的L个正确接收的确认分组，便将这些正确接收的分组记录，防止其超时重发；直至未正确接收的分组被接收方正确接收，接收窗口移动到新序号位置以接收新分组，发送方收到接收方的确认分组后，发送窗口向后移动到未记录的新数据分组处。c、发送窗口尺寸Wt需满足：1&lt;Wt&lt;=2^(n-1)    若Wt为1，则与停止-等待协议相同；若Wt&gt;2^(n-1)，则接收方无法分辨新旧数据分组d、接收窗口尺寸Wr需满足：1&lt;Wr&lt;=Wt    若Wr=1，则与回退N帧协议相同；若Wr&gt;Wt，则无意义</code></pre><h2 id="点对点协议-ppp-Point-to-Point-Protocol"><a href="#点对点协议-ppp-Point-to-Point-Protocol" class="headerlink" title="点对点协议 ppp(Point-to-Point Protocol)"></a>点对点协议 ppp(Point-to-Point Protocol)</h2><pre><code>ppp协议是当前使用最广泛的点对点数据链路层协议，个人用户通过在以太网上运行的ppp协议PPP over Ethernet简称PPPoE接入ISP，进而接入因特网。ppp协议也广泛运用于广域网路由器之间的专用链路。</code></pre><h4 id="ppp-协议的构成"><a href="#ppp-协议的构成" class="headerlink" title="ppp 协议的构成"></a>ppp 协议的构成</h4><pre><code>a、对各种协议数据报的封装方式，即封装成帧。b、链路控制协议LCP：用于建立、配置及测试数据链路的链接(面向字节的异步链路、面向比特 的同步链路)c、一套网络控制协议NCPs：每一个协议用于对网络层的不同协议提供支持</code></pre><h4 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h4><h5 id="1、帧的首部：F-1-字节-、A-1-字节-、C-1-字节-、P-2-字节"><a href="#1、帧的首部：F-1-字节-、A-1-字节-、C-1-字节-、P-2-字节" class="headerlink" title="1、帧的首部：F(1 字节)、A(1 字节)、C(1 字节)、P(2 字节)"></a>1、帧的首部：F(1 字节)、A(1 字节)、C(1 字节)、P(2 字节)</h5><pre><code>标志(Flag)字段：PPP帧的定界符，取值为0x7E地址(Adress)字段：取值为0xFF，预留(目前无作用)控制(Control)字段：取值为0x03，预留(目前无作用)协议(Protocol)字段：指明帧的数据部分送交哪个协议处理    取值0x0021：数据部分为IP数据报    取值0xC021：数据部分为LCP分组    取值0x8021：数据部分为NCP分组</code></pre><h5 id="2、帧的数据部分：网络层交付的数据报，不超过-1500-字节"><a href="#2、帧的数据部分：网络层交付的数据报，不超过-1500-字节" class="headerlink" title="2、帧的数据部分：网络层交付的数据报，不超过 1500 字节"></a>2、帧的数据部分：网络层交付的数据报，不超过 1500 字节</h5><h5 id="3、帧的尾部：FCS-2-字节-、F-1-字节"><a href="#3、帧的尾部：FCS-2-字节-、F-1-字节" class="headerlink" title="3、帧的尾部：FCS(2 字节)、F(1 字节)"></a>3、帧的尾部：FCS(2 字节)、F(1 字节)</h5><pre><code>帧检验序列(Frame Check Sequence)字段：循环冗余校验CRC计算出的检验位</code></pre><h4 id="ppp-协议解决透明传输"><a href="#ppp-协议解决透明传输" class="headerlink" title="ppp 协议解决透明传输"></a>ppp 协议解决透明传输</h4><pre><code>1、面向字节的异步链路采用传入转义字符填充法：    发送方处理：        a、出现的每一个7E(ppp帧定界符)字节在其前方插入7D字节，并令0x7E-0x20为0x5E，使其变为2字节序列0x7D5E        b、出现的每一个7D(转义字符)字节在其前方插入7D字节，并令0x7D-0x20为0x5D，使其变为2字节序列0x7D5D        c、出现的每一个ASCII码控制字符(数值小于0x20的字符)，在其前方插入7D字节，并令其加上0x20，例如0x03变为2字节序列0x7D23    接收方处理：对接收的帧进行反变换2、面向比特的同步链路采用插入比特0的比特填充法：    发送方处理：对帧的数据部分进行扫描(一般由硬件处理)，在连续的5个比特1后面填充比特0(0x7E的2进制为01111110)    接收方处理：对帧的数据部分进行扫描(一般由硬件处理)，将连续的5个比特1后的一个比特0删除</code></pre><h4 id="ppp-协议差错检测"><a href="#ppp-协议差错检测" class="headerlink" title="ppp 协议差错检测"></a>ppp 协议差错检测</h4><pre><code>采用CRC计算帧除F字段和FCS字段的值；采用的生成多项式CRC-CCITT=X^16+X^12+X^5+1；为减少CRC计算的CPU占用，采用查表法实现；接收方每收到一个ppp帧，就进行CRC校验。若检验成功，接收该帧；若失败则丢弃。因此使用PPP协议的数据链路层向上不提供可靠传输服务。</code></pre><h4 id="ppp-协议工作状态"><a href="#ppp-协议工作状态" class="headerlink" title="ppp 协议工作状态"></a>ppp 协议工作状态</h4><pre><code>1. PPP协议的工作流程：    当用户拨号接入ISP后，就建立了一条从用户PC机到ISP的物理连接。    这时用户PC机向ISP发送一系列的LCP分组(封装成多个PPP帧)，以便建立LCP连接。    这些分组及其响应选择了将要使用的一些PPP参数。    接着还要进行网络层配置，NCP给新接入的用户PC机分配一个临时的IP地址。    这样，用户PC机就成为因特网上的一个有IP地址的主机了。    当用户通信完毕时，NCP释放网络层连接，收回原来分配出去的IP地址。    接着，LCP释放数据链路层连接。    最后释放的是物理层的连接。注：PPP链路的起始和终止状态永远是“链路静止”(Link Dead)状态，这时在PC机和ISP的路由器之间并不存在物理层的连接。2. PPP协议的LCP连接：    当用户PC机通过调制解调器呼叫路由器时(通常是在屏幕上用鼠标点击一个连接按钮)，路由器就能够检测到调制解调器发出的载波信号。在双方建立了物理层连接后，PPP就进入“链路建立”(Link Establish)状态，其目的是建立链路层的LCP连接。    这时，LCP开始协商一些配置选项，即发生LCP的配置请求帧(Configure-Request)。这是一个PPP帧，其协议字段置为LCP对应的代码，而信息字段包含特定的配置请求。    链路的另一端可以发送以下响应中的其中一种：        (1)配置确认帧(Configure-Ack)：所有选项都接受。        (2)配置否认帧(Configure-Nak)：所有选项都理解但不能接受。        (3)配置拒绝帧(Configure-Reject)：选项有的不能识别或不能接受，需要协商。    LCP配置选项包括链路上的最大帧长、所使用的鉴别协议(authentication protocol)的规约(如果有的化话)，以及不使用PPP帧中的地址和控制字段(因为这两个字段的值是固定的，没有任何信息量，可以在PPP帧的首部中省略掉这两个字节)。    协商结束后双方就建立了LCP链路，接着就进入鉴别状态(Authentication)，在这一状态，只允许传送LCP协议的分组、鉴别协议的分组以及检测链路质量的分组。若使用口令鉴别协议PAP(Password Authentication Protocol)，则需要发起通信的一方发送身份标识符和口令。系统可运行用户重试若干次。如果需要有更好的安全性，则可使用更加复杂的口令握手鉴别协议CHAP(Challenge-Handshake Authentication Protocol)。若鉴别身份失败，则转到链路终止状态(Link Dead)。若鉴别成功，则进入网络层协议状态(Network-Layer Protocol)。3. PPP协议的NCP连接：    在网络层协议状态，PPP链路的两端的网络控制协议NCP根据网络层的不同协议互相交换网络层特定的网络控制分组。这个步骤是非常重要的，因为现在的路由器都能够同时支持多种的网络层协议。    总之，PPP协议两端的网络层可以运行不同的网络层协议，但仍然可以使用同一个PPP协议进行通信。    如果在PPP链路上运行的是IP协议，则对PPP链路的每一端配置IP协议模块(如分配IP地址)时就要使用NCP中支持IP的协议——IP控制协议IPCP(IP Control Protocol)。IPCP分组也封装成PPP帧(其中的协议字段为0x8021)在PPP链路中传送。在低速链路上运行时，双方还可以协商使用压缩的TCP和IP首部，以减少在链路上传送的比特数。    当网络层配置完毕后，链路就进入可进行数据通信的链路打开状态。链路的两个PPP端点可以彼此向对方发送分组。两个PPP端点还可发送回送请求LCP分组(Echo-Request)和回送回答LCP分组(Echo-Reply)，以检查链路的状态。    数据传输结束后，可以由链路的一端发出终止请求LCP分组(Terminate-Request)请求终止链路连接，在收到对方发来的终止确认LCP分组(Terminate-Ack)后，转到链路终止状态。    如果链路出现故障，也会从链路打开状态转到链路终止状态。    当调制解调器的载波停止后，则回到链路静止状态。注：从设备之间无链路开始，到先建立物理链路，再建立LCP链路。经过鉴别后再建立NCP链路，然后才能交换数据。由此可见，PPP协议已不是纯粹的数据链路层的协议，它还包含了物理层和网络层的内容。</code></pre><p><img src="/images/QQ20250204-210544.png" alt="流程图"></p><h2 id="媒体接入控制-MAC-Medium-Access-Control"><a href="#媒体接入控制-MAC-Medium-Access-Control" class="headerlink" title="媒体接入控制 MAC(Medium Access Control)"></a>媒体接入控制 MAC(Medium Access Control)</h2><pre><code>解决共享信道如何协调多个发送和接收站点对一个共享传输媒体的占用</code></pre><h4 id="一、静态划分信道"><a href="#一、静态划分信道" class="headerlink" title="一、静态划分信道"></a>一、静态划分信道</h4><pre><code>预先固定分配好信道，这类方法不灵活，对于突发性数据传输信道利用率会很低。通常在无线网络物理层中使用，而不在数据链路层中使用</code></pre><p>1、信道复用：复用(Multiplexing)是通信技术中的一个重要概念。复用就是通过一条物理线路同时传输多路用户的信号。当网络中传输媒体的传输容量大于多条单一信道传输的总通信量时，可利用复用技术在一条物理线路上建立多条通信信道来充分利用传输媒体的带宽。</p><pre><code>a、频分复用FDM：将传输线路的信道资源划分为多个子信道，各子信道之间留出隔离频带防止子信道之间的干扰。多路信号输入多路复用器时，复用器将每一路信号调制到不同频率的载波上，即不同子信道，多路信道在子信道上并行传输。接收端由分用器通过滤波将各路信号分开，恢复为原始的多路信号。(频分复用的所有用户同时占用不同的频带资源并行通信)b、时分复用TDM：时分复用技术将时间划分为一个个大小相等的时隙，将传输线路的带宽资源按时隙轮流分给不同的用户，每对用户只在被分配的时隙里使用线路传输数据。将一轮用户全部通信过所耗费的时隙称为时分复用帧(TDM帧)，每队用户在每一个TDM帧中占有固定序号的时隙。(时分复用的所有用户在不同时间占有同样的频带宽度)c、波分复用WDM：光的频分复用。多路波长为1310nm的光载波经光调制器调制后，分别将波长变换到1550nm~1561.2nm，每个光载波相隔1.6nm。这些波长相近的光载波经光复用器在同一根光纤中传播，由于光信号传输一段距离后会衰减，期间需要使用光纤放大器放大后继续传输。接收端经过光分用器分解为各个波长的光，再经光解调器恢复为相同波长的多路光载波。d、码分复用CDM：另一种共享信道的方法，主要用于多址接入，码分多址CDMA。CDM的用户可以在同样的时间使用同样的频带进行通信，由于个用户使用经过特殊挑选的不同码型，彼此之间不会产生干扰。</code></pre><p>2、复用与多址：复用是将单一媒体的频带资源划分成多个子信道，子信道之间相互独立，每个子信道只占用该媒体频带资源的一部分；多址(多点接入)处理的是动态分配信道给用户，对于移动通信系统等用户仅仅暂时性地占用信道的应用是必须的。</p><pre><code>多址相当于是对复用技术的具体应用。频分复用FDM和时分复用TDM同样可用于多址接入，频分多址FDMA和时分多址TDMA。</code></pre><p>3、码分多址 CDMA：每一个比特时间被划分为 m 个更短的间隔，称为码片(Chip)，m 的值通常为 64 或 128。使用 CDMA 的每一个站点被指派一个唯一的长度为 mbit 的码片序列(Chip Sequence)，若一个站相要发送比特 1，则发送它自己的 mbit 码片序列；若想要发送比特 0，则发送它自己的 mbit 码片序列的二进制反码。</p><pre><code>a、按照惯例，将码片序列中的0写为-1，将1写为+1。该通信方式称为直接序列扩频DSSS。b、码片序列的挑选原则：    1、分配给每个站点的码片序列必须各不相同，实际采用伪随机码序列。    2、每个站点的码片序列必须相互正交，即规格化内积为0。c、规格化内积：两个向量中的对应分量分别相乘后相加，最后除以向量中分量的数量。    S*S=1,S*T=0,S*(-T)=0,S*(-S)=-1d、若站点ABCD是码分多址系统的4个站点，D为接收站点，知道ABC三个站点的码片序列，若所有站发送的码片序列为同步的。A发送比特1即发送码片序列A，B发送比特0即(-B)，C未发送，则D收到的信号为A+(-B)。则D可对收到的叠加信号进行判断：    将叠加信号分别与各站的码片序列进行规格化内积运算，若结果为1，则该站发送比特1；若结果为-1，则该站发送比特0；若结果为0，则该站未发送数据。</code></pre><h4 id="二、动态接入控制"><a href="#二、动态接入控制" class="headerlink" title="二、动态接入控制"></a>二、动态接入控制</h4><pre><code>1、受控接入：    a、集中控制：在多点轮询协议中，存在一个主站以循环的方式轮询每个站点有无数据发送，只有被轮询到的站点才能发送数据，存在单点故障问题。    b、分撒控制：各站点平等，链接形成一个环形网络，令牌(一个特殊控制帧)沿环逐站传递，拥有令牌的站点才能发送数据，发送完成后将令牌传给下一个站点。如IEEE 802.5令牌环网、IEEE 802.4令牌总线网、光纤分布式数据接口FDDI。    c、收控接入模式已因为市场竞争退出历史。2、随机接入：所有站点通过竞争，随机地在信道上发送数据。如果恰巧有两个或更多的站点在同一时刻发送数据，则信号在共享媒体上就要产生碰撞(即发生了冲突)，使得这些站点的发送都失败。如共享式以太网。    a、使用点对点链路和链路交换机的交换式局域网已在有线领域代替共享式局域网；由于无线信道的广播天性，无线局域网仍使用共享媒体技术。</code></pre><h2 id="载波监听多址接入-碰撞检测-CSMA-CD-协议-总线局域网使用"><a href="#载波监听多址接入-碰撞检测-CSMA-CD-协议-总线局域网使用" class="headerlink" title="载波监听多址接入&#x2F;碰撞检测 CSMA&#x2F;CD 协议(总线局域网使用)"></a>载波监听多址接入&#x2F;碰撞检测 CSMA&#x2F;CD 协议(总线局域网使用)</h2><pre><code>协调随机接入的共享式以太网上主机工作，尽量避免产生碰撞。</code></pre><h4 id="1、多址接入-MA：多个主机-站点链接在一条总线上，竞争使用总线。"><a href="#1、多址接入-MA：多个主机-站点链接在一条总线上，竞争使用总线。" class="headerlink" title="1、多址接入 MA：多个主机&#x2F;站点链接在一条总线上，竞争使用总线。"></a>1、多址接入 MA：多个主机&#x2F;站点链接在一条总线上，竞争使用总线。</h4><h4 id="2、载波监听-CS：每一个站在发送帧之前先要检测一下总线上是否有其他站点在发送帧-“先听后说”"><a href="#2、载波监听-CS：每一个站在发送帧之前先要检测一下总线上是否有其他站点在发送帧-“先听后说”" class="headerlink" title="2、载波监听 CS：每一个站在发送帧之前先要检测一下总线上是否有其他站点在发送帧(“先听后说”):"></a>2、载波监听 CS：每一个站在发送帧之前先要检测一下总线上是否有其他站点在发送帧(“先听后说”):</h4><pre><code>a、若检测到总线空闲96比特时间则发送这个帧;b、若检测到总线忙，则继续检测并等待总线转为空闲96比特时间，然后发送这个帧。c、96比特时间：发送96bit所耗费的时间，也称帧间最小间隔，其可使接收方检测一个帧的结束，并得所有其他站点都能有机会平等竟争信道并发送帧。</code></pre><h4 id="3、碰撞检测-CD：站点发送帧时持续载波监听检测是否发生碰撞。"><a href="#3、碰撞检测-CD：站点发送帧时持续载波监听检测是否发生碰撞。" class="headerlink" title="3、碰撞检测 CD：站点发送帧时持续载波监听检测是否发生碰撞。"></a>3、碰撞检测 CD：站点发送帧时持续载波监听检测是否发生碰撞。</h4><pre><code>a、若多台主机同时发送帧，则帧会在总线中发生碰撞。站点检测到碰撞信号后立即停止发送帧，并退避随机一段时间，后重新发送之前的帧。b、强化碰撞：当发送帧的站点一旦检测到碰撞，除了立即停止发送帧外，还要再继续发送32比特或48比特的人为干扰信号(Jamming Signal)，以便有足够多的碰撞信号使所有站点都能检测出碰撞。</code></pre><h4 id="4、争用期-碰撞窗口-以太网单程端到端传播时延-T-的二倍"><a href="#4、争用期-碰撞窗口-以太网单程端到端传播时延-T-的二倍" class="headerlink" title="4、争用期(碰撞窗口):以太网单程端到端传播时延 T 的二倍"></a>4、争用期(碰撞窗口):以太网单程端到端传播时延 T 的二倍</h4><pre><code>a、主机最多经过2T的时长即可检测本次数据发送是否发生碰撞。b、在以太网中发送帧的主机越多，端到端的往返传播时延就越大，发生碰撞的概率就越大。因此共享式以太网不能链接太多的主机、使用的总线也不能太长。c、10Mb/s的以太网把争用期定为512bit发送时间，51.2微秒，因此其总线长度不能超过5120m，考虑到信号衰减等其他因素，规定总线长度不超过2500m。</code></pre><h4 id="5、最小帧长：当主机发送完帧后不再针对该帧检测碰撞，若帧的长度过小在传播途中发生碰撞，主机不会知晓并重发该帧。因此要保证帧的最小发送时长大于争用期。"><a href="#5、最小帧长：当主机发送完帧后不再针对该帧检测碰撞，若帧的长度过小在传播途中发生碰撞，主机不会知晓并重发该帧。因此要保证帧的最小发送时长大于争用期。" class="headerlink" title="5、最小帧长：当主机发送完帧后不再针对该帧检测碰撞，若帧的长度过小在传播途中发生碰撞，主机不会知晓并重发该帧。因此要保证帧的最小发送时长大于争用期。"></a>5、最小帧长：当主机发送完帧后不再针对该帧检测碰撞，若帧的长度过小在传播途中发生碰撞，主机不会知晓并重发该帧。因此要保证帧的最小发送时长大于争用期。</h4><pre><code>a、以太网规定最小帧长为64字节即512bit，若发送的数据小于64字节则填充数据使其大于64字节。b、若在争用期内未检测到碰撞，则后续发送的数据一定不会发生碰撞；若检测到碰撞则立即停止发送，此时发送的数据长度一定小于64字节，因此长度小于64字节的帧都是由于碰撞而产生的无效帧。</code></pre><h4 id="6、最大帧长：若帧的长度太长，会导致总线长时间占用，接收主机的缓冲区也可能无法装下该帧而溢出。"><a href="#6、最大帧长：若帧的长度太长，会导致总线长时间占用，接收主机的缓冲区也可能无法装下该帧而溢出。" class="headerlink" title="6、最大帧长：若帧的长度太长，会导致总线长时间占用，接收主机的缓冲区也可能无法装下该帧而溢出。"></a>6、最大帧长：若帧的长度太长，会导致总线长时间占用，接收主机的缓冲区也可能无法装下该帧而溢出。</h4><pre><code>a、以太网v2的MAC帧(最大长度为1518字节)：    目的地址(6字节)、源地址(6字节)、类型(2字节)、数据载荷(46~1500字节)、FCS(4字节)b、插入VLAN标记的802.1Q帧(最大长度1522字节)：    目的地址(6字节)、源地址(6字节)、VLAN标记(4字节)、类型(2字节)、数据载荷(42~1500字节)、FCS(4字节)</code></pre><h4 id="7、退避时间算法：截断二进制指数退避算法"><a href="#7、退避时间算法：截断二进制指数退避算法" class="headerlink" title="7、退避时间算法：截断二进制指数退避算法"></a>7、退避时间算法：截断二进制指数退避算法</h4><pre><code>a、退避时间：主机检测到碰撞后立即停止发送数据，退避一段时间后重新发送数据帧。b、退避时间=基本退避时间(争用期2T)*随机数r(r为离散的整数集合&#123;0,1,……,(2^k-1)&#125;中随机选出一个数，k=MIN[重传次数，10])c、若连续多次发生碰撞，就表明可能有较多的主机参与竞争信道。但使用上述退避算法可使重传需要推迟的平均时间随重传次数而增大(这也称为动态退避)，因而减小发生碰撞的概率。d、当重传达16次仍不能成功时，表明同时打算发送帧的主机太多，以至于连续发生碰撞，则丢弃该帧，并向高层报告。</code></pre><h4 id="8、信道利用率："><a href="#8、信道利用率：" class="headerlink" title="8、信道利用率："></a>8、信道利用率：</h4><pre><code>信道极限利用率Smax=发送时延T0/(发送时延T0+端对端最大传播时延T)若要提高信道利用率，则总线端到端的长度应受到限制；帧长应大一些。</code></pre><h2 id="载波监听多址接入-碰撞避免-CSMA-CA-协议-无线局域网使用"><a href="#载波监听多址接入-碰撞避免-CSMA-CA-协议-无线局域网使用" class="headerlink" title="载波监听多址接入&#x2F;碰撞避免 CSMA&#x2F;CA 协议(无线局域网使用)"></a>载波监听多址接入&#x2F;碰撞避免 CSMA&#x2F;CA 协议(无线局域网使用)</h2><h4 id="1、在无线局域网中不使用碰撞检测-CD-的原因："><a href="#1、在无线局域网中不使用碰撞检测-CD-的原因：" class="headerlink" title="1、在无线局域网中不使用碰撞检测 CD 的原因："></a>1、在无线局域网中不使用碰撞检测 CD 的原因：</h4><pre><code>1、无线传输信号强度动态范围大，无线网卡接收到的信号强度远远小于发送强度，对硬件要求高2、由于无线电波传输存在隐蔽站问题，进行碰撞检测意义不大</code></pre><h4 id="2、碰撞避免-CA："><a href="#2、碰撞避免-CA：" class="headerlink" title="2、碰撞避免 CA："></a>2、碰撞避免 CA：</h4><pre><code>a、802.11无线局域网在CSMA的基础上增加碰撞避免CA功能。由于不能避免所有碰撞且无线通信误码率较高，802.11标准还采用停止-等待协议确保数据正确接收。b、802.11的MAC层标准定义的两种媒体接入控制方式：    (1)分布式协调功能DCF(Distributed Coordination Function)：在DCF方式下，没有中心控制站点，每个站点使用CSMA/CA协议通过争用信道来获取发送权，这是802.11定义的默认方式。    (2)点协调功能PCF(Point Coordination Function)。PCF方式使用集中控制的接入算法(一般在接入点AP实现集中控制)，是802.11定义的可选方式，在实际中较少使用</code></pre><h4 id="3、帧间间隔-IFS-InterFrame-Space-：所有站点必须在发送帧之前持续检测信道空闲的时长"><a href="#3、帧间间隔-IFS-InterFrame-Space-：所有站点必须在发送帧之前持续检测信道空闲的时长" class="headerlink" title="3、帧间间隔 IFS(InterFrame Space)：所有站点必须在发送帧之前持续检测信道空闲的时长"></a>3、帧间间隔 IFS(InterFrame Space)：所有站点必须在发送帧之前持续检测信道空闲的时长</h4><pre><code>a、帧间间隔的长短取决于该站点要发送的帧的类型:    (1)高优先级帧需要等待的时间较短，因此可优先获得发送权;低优先级帧需要等待的时间较长。    (2)若某个站的低优先级帧还没来得及发送，而其他站的高优先级帧已发送到信道上，则信道变为忙态，因而低优先级帧就只能再推迟发送了。这样就减少了发生碰撞的机会。b、常用的两种帧间间隔如下:    (1)短帧间间隔SIFS(28μs)，是最短的帧间间隔，用来分隔开属于一次对话的各帧。一个站点应当能够在段时间内从发送方式切换到接收方式。使用SIFS的帧类型有ACK帧、CTS帧、由过长的MAC帧分片后数据帧、以及所有回答AP探询的帧和在PCF方式中接入点AP发送出的任何帧。    (2)DCF帧间间隔DIFS(128uS)，它比短帧间间隔SIFS要长得多，在DCF方式中用来发送数据帧和管理帧。</code></pre><h4 id="4、CSMA-CA-协议工作原理："><a href="#4、CSMA-CA-协议工作原理：" class="headerlink" title="4、CSMA&#x2F;CA 协议工作原理："></a>4、CSMA&#x2F;CA 协议工作原理：</h4><p><img src="/images/QQ20250209-203455.png" alt="工作原理"></p><pre><code>a、站点在检测信道空闲后需等待DIFS间隔再发送帧的原因：若其他站点有高优先级的帧要发送，需让其先发送；b、目的站接收数据帧等待SIFS间隔再发送ACK帧的原因：等待发送站由发送状态切换到接收状态；c、信道由忙转为空闲且经过DIFS时间后，还要退避一段随机时间才能使用信道的原因：防止多个站点同时发送数据造成碰撞。d、退避算法的使用条件：    (1)无需使用：站点检测信道为空闲，且发送的数据帧不是紧接着上一个数据帧连续发送的。    (2)必须使用：发送帧之前检测到信道忙；每次重传数据帧时；每次成功发送后要连续发送下一个数据帧时(这样避免一个站点长时间占用信道)。</code></pre><h4 id="5、CSMA-CA-协议退避算法："><a href="#5、CSMA-CA-协议退避算法：" class="headerlink" title="5、CSMA&#x2F;CA 协议退避算法："></a>5、CSMA&#x2F;CA 协议退避算法：</h4><pre><code>a、在执行退避算法时，站点为退避计时器设置一个随机的退避时间:    (1)当退避计时器的时间减小到零时，就开始发送数据;    (2)当退避计时器的时间还未减小到零时而信道又转变为忙状态，这时就冻结退避计时器的数值，重新等待信道变为空闲，再经过时间DIFS后，继续启动退避计时器。b、在进行第i次退避时，退避时间在时隙编号&#123;0,1,……,2^(2+i)-1&#125;中随机选择一个，然后乘以基本退避时间(也就是一个时隙的长度)就可以得到随机的退避时间。这样做是为了使不同站点选择相同退避时间的概率减少。当时隙编号达到255时(对应于第6次退避)就不再增加了。</code></pre><p><img src="/images/QQ20250209-211903.png" alt="退避算法"></p><h4 id="6、信道预约：尽可能减少碰撞概率"><a href="#6、信道预约：尽可能减少碰撞概率" class="headerlink" title="6、信道预约：尽可能减少碰撞概率"></a>6、信道预约：尽可能减少碰撞概率</h4><pre><code>(1)源站在发送数据帧之前经过DIFS间隔先发送一个短的控制帧，称为请求发送RTS(RequestTo Send)，它包括源地址、目的地址以及这次通信(包括相应的确认帧)所需的持续时间。(2)若目的站正确收到源站发来的RTS帧，且媒体空闲，经过SIFS间隔就发送一个响应控制帧，称为允许发送CTS(ClearToSend)，它也包括这次通信所需的持续时间(从RTS帧中将此持续时间复制到CTS帧中)。(3)源站收到CTS帧后，再等待一段时间SIFS后，就可发送其数据帧。(4)若目的站正确收到了源站发来的数据帧，在等待时间SIFS后，就向源站发送确认帧ACK。(5)除源站和目的站以外的其他各站，在收到CTS帧(或数据帧)后就推迟接入到无线局域网中。这样就保证了源站和目的站之间的通信不会受到其他站的干扰。(6)如果RTS帧发生碰撞，源站就收不到CTS帧，需执行退避算法重传RTS帧。(7)由于RTS帧和CTS帧很短，发送碰撞的概率、碰撞产生的开销及本身的开销都很小。而对于一般的数据帧，其发送时延往往大于传播时延(因为是局域网)，碰撞的概率很大，且一旦发生碰撞而导致数据帧重发，则浪费的时间就很多，因此用很小的代价对信道进行预约往往是值得的。(8)802.11标准规定了3种情况供用户选择:    a、使用RTS帧和CTS帧    b、不使用RTS帧和CTS帧    c、只有当数据帧的长度超过某一数值时才使用RTS帧和CTS帧</code></pre><h4 id="7、虚拟载波监听：除-RTS-帧和-CTS-帧会携带通信需要持续的时间，数据帧也能携带通信需要持续的时间"><a href="#7、虚拟载波监听：除-RTS-帧和-CTS-帧会携带通信需要持续的时间，数据帧也能携带通信需要持续的时间" class="headerlink" title="7、虚拟载波监听：除 RTS 帧和 CTS 帧会携带通信需要持续的时间，数据帧也能携带通信需要持续的时间"></a>7、虚拟载波监听：除 RTS 帧和 CTS 帧会携带通信需要持续的时间，数据帧也能携带通信需要持续的时间</h4><pre><code>由于利用虚拟载波监听机制，站点只要监听到RTS帧，CTS帧或数据帧中的任何一个，就能知道信道被占用的持续时间不需要真正监听到信道上的信号，因此虚拟载波监听机制能减少隐蔽站带来的碰撞问题。</code></pre><h2 id="MAC-地址、IP-地址、ARP-协议"><a href="#MAC-地址、IP-地址、ARP-协议" class="headerlink" title="MAC 地址、IP 地址、ARP 协议"></a>MAC 地址、IP 地址、ARP 协议</h2><pre><code>MAC地址是以太网的MAC子层所使用的地址，属于数据链路层；IP地址是TCP/IP体系结构网际层所使用的地址；ARP协议属于TCP/IP体系结构的网际层，其作用是已知设备所分配到的IP地址，使用ARP协议可以通过该IP地址获取到设备的MAC地址。</code></pre><h4 id="1、MAC-地址：为使链接在同一个广播信道上的多个主机通信，每个主机所拥有的唯一标识-数据链路层地址"><a href="#1、MAC-地址：为使链接在同一个广播信道上的多个主机通信，每个主机所拥有的唯一标识-数据链路层地址" class="headerlink" title="1、MAC 地址：为使链接在同一个广播信道上的多个主机通信，每个主机所拥有的唯一标识(数据链路层地址)"></a>1、MAC 地址：为使链接在同一个广播信道上的多个主机通信，每个主机所拥有的唯一标识(数据链路层地址)</h4><pre><code>a、每个主机发送的帧中必须携带发送主机的地址和接收主机的地址，由于这类地址用于媒体接入控制MAC，因此此类地址被称为MAC地址；b、MAC地址一般被固化在网卡(网络适配器)的EEPROM中，因此也被称为硬件地址；c、MAC地址也被称为物理地址，但并不属于物理层。d、一般情况下，用户主机会包含两个网络适配器:有线局域网适配器(有线网卡)和无线局域网适配器(无线网卡)。每个网络适配器都有一个全球唯一的MAC地址。而交换机和路由器往往拥有更多的网络接口，所以会拥有更多的MAC地址。综上所述，严格来说，MAC地址是对网络上各接口的唯一标识，而不是对网络上各设备的唯一标识。</code></pre><h4 id="2、IEEE-802-局域网-MAC-地址格式"><a href="#2、IEEE-802-局域网-MAC-地址格式" class="headerlink" title="2、IEEE 802 局域网 MAC 地址格式"></a>2、IEEE 802 局域网 MAC 地址格式</h4><pre><code>a、共有48个bit位、6字节，从左至右依次为第一字节到第六字节，每个字节比特位从左至右为b7~b0。前三个字节为组织唯一标识符OUI，由IEEE的注册管理机构分配，生产网络设备的厂商需要向该机构申请一个或多个OUI；后三个字节为网络接口标识符NIC，由厂商自行随意分配；这种标识符称为扩展的唯一标识符EUI，对于48bit的MAC地址可称为EUI-48。b、表示方法：每4bit转变为1个16进制数，共12个字符。    标准表示：XX-XX-XX-XX-XX-XX (windows)    其他表示：XX:XX:XX:XX:XX:XX (linux,mac,Android)             XXXX.XXXX.XXXX    (Packet Tracer仿真软件)c、MAC地址类型：第一字节的第零位即b0，为1表示多播，为0表示单播；第一字节的第1位即b1，为1表示本地管理，为0表示全球管理。    (1)单播地址(unicast address)：主要应用于一对一的站点数据传输，相应的单播帧只有一个站点收到；广播地址(broadcast address)：主要应用于广播的应用，比如ARP请求，相应的广播帧局域网内的所有站点都能够收到；多播地址(multicast address)：主要应用于一对多的应用，比如在802.1X认证，STP/RSTP/MSTP协议等。    (2)全球管理地址保证在全球没有相同的地址，厂商向IEEE购买的OUI都属于全球管理地址;本地管理地址为用户可任意分配网络上的地址。    (3)全球管理的单播地址：厂商生产网络设备(网卡、交换机、路由器)时固化的MAC地址；       全球管理的多播地址：标准网络设备所支持的多播地址，用于特定功能；       本地管理的单播地址：由网络管理员分配，会覆盖网络接口的全球管理单播地址；       本地管理的多播地址：用于用户对主机进行软件配置，以表明其属于哪些多播组；       广播地址：48个bit位均为1，即FF-FF-FF-FF-FF-FF。d、MAC的地址总量为2^48个，每类地址各占四分之一。对于使用EUI-48空间的应用程序，IEEE的目标寿命为100年(直到2080)，但是鼓励采用EUI-64作为替代。e、MAC地址发送顺序：字节顺序为第一字节到第六字节；字节内比特发送顺序为b0-&gt;b7f、某主机发送单播帧，在帧首部的目的地址字段填入目的主机的MAC地址，源地址字段填入自己的MAC地址，该总线上的所有主机都会收到该帧，各主机的网卡将目的地址字段的MAC地址与自身MAC地址进行比较，相同则接收该帧，不同则丢弃；若发送的为广播帧，则目的地址字段的MAC地址为FF-FF-FF-FF-FF-FF，各主机的网卡收到后发现为广播地址，接收该帧；若发送的为多播帧，则将多播地址放入目的地址字段，则各主机的多播组列表中含有该多播地址的主机将接收该帧，不含该地址的则丢弃。</code></pre><h4 id="3、IP-地址：因特网上的主机和路由器使用的网络层地址。"><a href="#3、IP-地址：因特网上的主机和路由器使用的网络层地址。" class="headerlink" title="3、IP 地址：因特网上的主机和路由器使用的网络层地址。"></a>3、IP 地址：因特网上的主机和路由器使用的网络层地址。</h4><pre><code>(1)其用于标识两部分信息：    a、网络编号；标识因特网上的不同网络；    b、主机编号：标识同一网络上不同主机或路由器各接口。(2)MAC地址在数据链路层封装的帧首部中；IP地址在网络层封装的IP数据报首部。(3)数据包在网络中转发过程中，源IP地址和目的IP地址保持不变；源MAC地址和目的MAC地址逐个链路(或逐个网络)改变，每转发一次源MAC地址变为当前链路上发送帧的主机(路由器接口)的MAC地址，目的MAC地址变为当前链路上的目的主机(路由接口)的MAC地址。</code></pre><h4 id="4、地址解析协议-ARP：网络层协议，通过-IP-地址找到对应的-MAC-地址。"><a href="#4、地址解析协议-ARP：网络层协议，通过-IP-地址找到对应的-MAC-地址。" class="headerlink" title="4、地址解析协议 ARP：网络层协议，通过 IP 地址找到对应的 MAC 地址。"></a>4、地址解析协议 ARP：网络层协议，通过 IP 地址找到对应的 MAC 地址。</h4><pre><code>a、当某主机想向同一个网络中的另一台主机发送数据，仅知道其IP，源主机先在自己的ARP高速缓存表中查找目的主机的IP地址所对应的MAC地址，若找到了，则可以封装MAC帧进行发送;若找不到，则广播发送ARP请求(封装在广播MAC帧中)，该请求包括源主机的IP地址和MAC地址;b、目的主机收到ARP请求后，将源主机的IP地址与MAC地址记录到自己的ARP高速缓存表中，然后给源主机单播发送ARP响应(封装在单播MAC帧中)，ARP响应中包含有目的主机的IP地址和MAC地址;c、源主机收到ARP响应后，将目的主机的IP地址与MAC地址记录到自己的ARP高速缓存表中，然后就可以封装之前想发送的MAC帧并发送给目的主机。d、ARP的作用范围:逐段链路或逐个网络使用，不能跨网络使用。e、除ARP请求和响应外，ARP还有其他类型的报文，例如用于检查IP地址冲突的“无故ARP或称免费ARP(Gratuitous ARP)”。f、ARP没有安全验证机制，存在ARP欺骗(攻击)问题。</code></pre><h2 id="集线器和交换机"><a href="#集线器和交换机" class="headerlink" title="集线器和交换机"></a>集线器和交换机</h2><h4 id="1、集线器-HUB："><a href="#1、集线器-HUB：" class="headerlink" title="1、集线器 HUB："></a>1、集线器 HUB：</h4><pre><code>a、早期以太网互联设备，链接起来的仍是总线型以太网，使用CSMA/CD协议b、工作在物理层，仅对每个接口进行信号放大转发，不进行碰撞检测，有少量容错能力和网络管理功能(如在内部断开与出故障的网卡的连线)c、仅支持半双工工作模式，即不能同时接收和发送数据。d、使用集线器链接多个网络形成一个更大的网络，这个网络上的所有主机属于同一个碰撞域和广播域。</code></pre><h4 id="2、交换机-SWITCH："><a href="#2、交换机-SWITCH：" class="headerlink" title="2、交换机 SWITCH："></a>2、交换机 SWITCH：</h4><pre><code>a、工作在数据链路层(包含物理层)，收到帧后在帧交换表中查找帧的目的MAC地址对应的接口号，然后通过该接口转发帧。b、交换机通常有多个接口，每个接口可与一台主机或另一个交换机链接，工作在全双工模式，可同时收发数据。c、具有并行性，能同时联通多对接口，使多对主机同时通信，无碰撞。d、其内部的帧交换表是通过自学习算法建立起来的，帧有两种转发方式：    (1)存储转发：收到的帧先存储在本地缓存，再转发到相应的接口    (2)直接交换：采用基于硬件的交叉矩阵，收到的帧不存储直接转发，交换延迟非常小，但不检查帧是否存在差错。e、通过交换机链接的多个网络形成的更大网络，其每个接口(网络)都是一个独立的碰撞域，即交换机隔离碰撞域，但这个网络上的所有主机属于同一个广播域，即不隔离广播域。</code></pre><h4 id="3、交换机自学习和转发帧的流程："><a href="#3、交换机自学习和转发帧的流程：" class="headerlink" title="3、交换机自学习和转发帧的流程："></a>3、交换机自学习和转发帧的流程：</h4><pre><code>a、交换机刚启动时其内部的帧交换表为空。当任意一个接口收到帧时，会先进行登记，将发送帧的主机的MAC地址(即源MAC地址)和接口登记在帧交换表。转发时根据帧中的目的MAC地址，遍历帧交换表，若表中存在帧的目的MAC地址及其对应接口，则直接将帧发送至该接口(明确转发)；若不存在，则向除进入交换机的接口外的所有接口都进行转发(盲目泛洪)，此时各接口上的网卡根据目的MAC地址与自身MAC地址是否相同来判断是否接收该帧。b、若经过查表后发现目的MAC地址的接口号与帧进入时的接口一致，此时直接将该帧丢弃。(源主机和目的主机直接相连在同一个总线型网络上)c、帧交换表中的每一条记录都有自己的有效时间，到期自动删除。这是因为MAC地址与交换机接口的对应关系不是永久的，如链接某一接口的主机发生改变、某主机更换了网卡。</code></pre><h4 id="4、以太网交换机生成树协议-STP：在通过增加冗余链路增强网络可靠性的同时避免网络回路带来的问题"><a href="#4、以太网交换机生成树协议-STP：在通过增加冗余链路增强网络可靠性的同时避免网络回路带来的问题" class="headerlink" title="4、以太网交换机生成树协议 STP：在通过增加冗余链路增强网络可靠性的同时避免网络回路带来的问题"></a>4、以太网交换机生成树协议 STP：在通过增加冗余链路增强网络可靠性的同时避免网络回路带来的问题</h4><pre><code>a、为提高网络可靠性，可通过增加交换机之间的冗余物理链路来防止某一物理链路故障造成的通信故障。b、增加冗余链路的同时也会形成网络环路，进而产生负面效应：    (1)广播风暴：某一交换机上的主机发送广播帧，该广播帧会在形成环路的各交换机上持续转发，消耗大量网络资源，使得网络无法正常转发其他帧。    (2)主机收到重复的广播帧：由于广播风暴，各交换机上的各主机会持续收到这些重复的广播帧，造成主机资源浪费。    (3)交换机的帧交换表震荡(漂移)：由于广播风暴，各交换机不断收到不同接口的同一源MAC地址的广播帧，针对该MAC地址记录不断变动。c、对于存在物理冗余链路的网络，使用生成树协议STP的交换机能够自动计算并构建一个逻辑上没有环路的网络，自动屏蔽部分接口。其拓扑结构必须是树形的(无逻辑环路)，同时确保整个网络连通。d、当首次链接交换机或网络物理拓扑发生变化(人为改变或发生故障)时，交换机都将进行生成树的重新计算。</code></pre><h2 id="虚拟局域网-VLAN-Virtual-Local-Area-Network"><a href="#虚拟局域网-VLAN-Virtual-Local-Area-Network" class="headerlink" title="虚拟局域网 VLAN(Virtual Local Area Network)"></a>虚拟局域网 VLAN(Virtual Local Area Network)</h2><pre><code>在一个通过交换机连接的交换式以太网中，所有的主机共属于一个广播域。为了减少频繁的广播通信对网络资源的浪费，使用VLAN技术将某些具有共同需求但可能不位于同一个物理空间(如连接在同一个交换机上)的主机划分为同一个逻辑组，使得逻辑组内的广播帧只能在该组内传播。</code></pre><h4 id="1、IEEE-802-1Q-帧：对以太网-MAC-帧格式进行扩展，插入-4-字节的-VLAN-标记。"><a href="#1、IEEE-802-1Q-帧：对以太网-MAC-帧格式进行扩展，插入-4-字节的-VLAN-标记。" class="headerlink" title="1、IEEE 802.1Q 帧：对以太网 MAC 帧格式进行扩展，插入 4 字节的 VLAN 标记。"></a>1、IEEE 802.1Q 帧：对以太网 MAC 帧格式进行扩展，插入 4 字节的 VLAN 标记。</h4><pre><code>a、VLAN标记的最后12bit称为VLAN标识符VID，它唯一地标志了以太网帧属于哪一个VLAN。    (1)VID的取值范围是0~4095(0~2^12-1)。    (2)0和4095都不用来表示VLAN，因此用于表示VLAN的VID的有效取值范围是1~4094。b、802.1Q帧是由交换机来处理的，而不是用户主机来处理的，用户网卡只能接收MAC帧。    (1)当交换机收到普通的以太网帧时，会将其插入4字节的VLAN标记转变为802.1Q帧，简称“打标签”。    (2)当交换机转发802.1Q帧时，可能会删除其4字节VLAN标记转变为普通以太网帧，简称“去标签”。</code></pre><h4 id="2、交换机的端口类型：Access、Trunk、Hybrid-华为交换机私有"><a href="#2、交换机的端口类型：Access、Trunk、Hybrid-华为交换机私有" class="headerlink" title="2、交换机的端口类型：Access、Trunk、Hybrid(华为交换机私有)"></a>2、交换机的端口类型：Access、Trunk、Hybrid(华为交换机私有)</h4><pre><code>a、交换机各端口的缺省VLAN ID：    (1)在思科交换机称为Native VLAN，即本征VLAN，默认为1；    (2)在华为交换机上称为Port VLAN ID，即端口VLAN ID，简记为PVID；    (3)交换机的端口有且仅有一个PVID。b、Access端口：    (1)Access端口一般用于连接用户计算机;    (2)Access端口只能属于一个VLAN;    (3)Access端口的PVID值与端口所属VLAN的ID相同(默认为1);    (4)Access端口接收处理方法:一般只接受“未打标签”的普通以太网MAC帧。根据接收帧的端口的PVID给帧“打标签”，即插入4字节VLAN标记字段，字段中的VID取值与端口的PVID取值相等。(接收的帧为广播帧)    (5)Access端口发送处理方法:若帧中的VID与端口的PVID相等，则“去标签并转发该帧;否则不转发。(转发的帧为广播帧)c、Trunk端口：    (1)Trunk端口一般用于交换机之间或交换机与路由器之间的互连;    (2)Trunk端口可以属于多个VLAN;    (3)用户可以设置Trunk端口的PVID值。默认情况下，Trunk端口的PVID值为1。    (4)Trunk端口发送处理方法:对于VID等于PVID的帧，“去标签”再再转发;对于VID不等于PVID的帧，直接转发。    (5)Trunk端口接收处理方法:对于“未打标签”的帧，根据接收帧的端口的PVID给帧“打标签即插入4字节VLAN标记字段，字段中的VID取值与端口的PVID取值相等;对于“已打标签的帧”则直接接收。    (6)互联的Trunk端口的PVID值若不相等可能会造成转发错误。d、Hybrid端口：    (1)Hybrid端口既可用于交换机之间或交换机与路由器之间的互连(同Trunk端口)，也可用于交换机与用户计算机之间的互连(同Access端口);    (2)Hybrid端口可以属于多个VLAN(同Trunk端口);    (3)用户可以设置Hybrid端口的PVID值。默认情况下Hybrid端口的PVID值为1(同Trun端口);    (4)Hybrid端口发送处理方法(与Trunk端口不同):        查看帧的VID是否在端口的“去标签”列表中:若存在，则“去标签”后再转发;若不存在，则直接转发。    (5)Hybrid端口接收处理方法(同Trunk端口):        对于“未打标签”的帧，根据接收帧的端口的PVID给帧“打标签”，即插入4字节VLAN标记字段，字段中的VID取值与端口的PVID取值相等；对于“已打标签的帧”则直接接收。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Learning Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物理层</title>
      <link href="/2025/02/22/%E7%89%A9%E7%90%86%E5%B1%82/"/>
      <url>/2025/02/22/%E7%89%A9%E7%90%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a><center>物理层</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><pre><code>任务：在链接各种计算机的传输媒体上传输数据比特流与数据链路层关系：屏蔽了各种传输媒体的差异，使数据链路层仅需考虑完成本层的协议和服务，而不必考虑具体的传输媒体</code></pre><span id="more"></span><h2 id="物理层协议的主要任务"><a href="#物理层协议的主要任务" class="headerlink" title="物理层协议的主要任务"></a>物理层协议的主要任务</h2><pre><code>1、机械特性：指明接口所用接线器的形状和尺寸、引脚数目和排列、固定和锁定装置2、电气特性：指明在接口电缆各条线上出现的电压范围3、功能特性；指明某条线上出现某一电平的电压表示何种意义4、过程特性：指明对于不同功能的各种可能事件的出现顺序</code></pre><h2 id="物理层下的传输媒体：不属于体系结构的任何一层"><a href="#物理层下的传输媒体：不属于体系结构的任何一层" class="headerlink" title="物理层下的传输媒体：不属于体系结构的任何一层"></a>物理层下的传输媒体：不属于体系结构的任何一层</h2><pre><code>1、导引型传输媒体：同轴电缆、双绞线、光纤、电力线2、非导引型传输媒体：无线电波、微波、红外线、可见光</code></pre><h2 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h2><h5 id="1、串行传输和并行传输"><a href="#1、串行传输和并行传输" class="headerlink" title="1、串行传输和并行传输"></a>1、串行传输和并行传输</h5><pre><code>a、串行传输一次传输一个bit，远距离传输时使用b、并行传输一次可传输多个bit，短距离传输如计算机内部使用</code></pre><h5 id="2、同步传输和异步传输"><a href="#2、同步传输和异步传输" class="headerlink" title="2、同步传输和异步传输"></a>2、同步传输和异步传输</h5><pre><code>a、同步传输数据块以比特流的形式稳定传输，接收方在每个bit信号的中间时刻检测bit位。由于不同设备时钟频率存在差异，在数据传输过程中会导致接收方对bit信号判别错位。    解决方法(收发双方时钟同步的方法)：        1、外同步：在收发双方之间添加一条单独的时钟信号线，接收方按照时钟同步信号的频率来接收信号        2、内同步：发送端将时钟同步信号编码到发送数据中一同传输(曼彻斯特编码)b、异步传输以字节为单位异步，字节之间的时间间隔不固定，因此需要在字节首尾分别添加起始位和结束位，但字节中的每个比特仍然需要同步即各bit持续时间相同</code></pre><h5 id="3、单工、半双工、全双工"><a href="#3、单工、半双工、全双工" class="headerlink" title="3、单工、半双工、全双工"></a>3、单工、半双工、全双工</h5><pre><code>a、单工即单向通信，通信双方只有一个数据传输方向，仅需一条信道b、半双工也称双向交替通信，通信双方可相互传输数据，但不能同时进行，需要两条信道c、全双工又称双向同时通信，通信双方可同时发送和接收数据，需要两条信道</code></pre><h2 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h2><pre><code>计算机中的网卡将比特0和比特1变换成相应的电信号发送到网线，由信源发出的原始电信号称为基带信号，基带信号分为数字基带信号和模拟基带信号。    1、对数字基带信号在不改变信号性质的前提下进行波形变换，这一过程称为编码，编码后的信号仍为数字信号，在数字通道内传播，例如传统以太网(10Mb/s)使用的曼彻斯特编码；将数字基带信号转移到较高频段并转换为模拟信号，这一过程称为调制，调制后产生的信号是模拟信号，在模拟信道内传播，例如WIFi使用补码键控、正交频分复用等调制方法。    2、将模拟基带信号通过采样、量化、编码进行数字化可将其转变为数字信号，在数字信道内传播，例如对音频信号进行编码的脉码调制PCM；对模拟基带信号进行调制的应用有将语音加载到模拟的载波信号中传输，如传统电话，频分复用FDM技术充分利用带宽资源</code></pre><h4 id="1、码元：在使用时间域的波形表示数字信号时，代表不同离散数值的基本波形"><a href="#1、码元：在使用时间域的波形表示数字信号时，代表不同离散数值的基本波形" class="headerlink" title="1、码元：在使用时间域的波形表示数字信号时，代表不同离散数值的基本波形"></a>1、码元：在使用时间域的波形表示数字信号时，代表不同离散数值的基本波形</h4><h4 id="2、常用编码"><a href="#2、常用编码" class="headerlink" title="2、常用编码"></a>2、常用编码</h4><pre><code>a、不归零编码NRZ(存在同步问题)：码元只有正电平和负电平，需要额外一根传输线来传输时钟信号以帮助接收方判断相同码元的数量b、归零编码RZ：每个码元传输后信号都要归零，接收方仅需在归零后进行采样，其相当于将时钟信号编码在了数据之内，称为“自同步”，其大部分带宽被用于归零而造成浪费c、曼彻斯特编码：利用码元中间时刻的跳变(由低电平跳变为高电平或相反)来表示时钟和数据d、差分曼彻斯特编码：用码元中间时刻的跳变表示时钟，而用码元开始处和上一个码元结束处的电平变化表示数据，例如开始处为高电平，上一个结束处为低电平e、反向不归零编码NRZI：在码元内不会出现零电平。若当前码元持续时间内的电平与前一个码元持续时间内的电平不同(也成为电平反转)则表示0，若电平保持不变则表示1.</code></pre><h4 id="3、基本调制方法"><a href="#3、基本调制方法" class="headerlink" title="3、基本调制方法"></a>3、基本调制方法</h4><pre><code>a、调幅(AM)：五载波输出表示0，有载波输出表示1b、调频(FM)：频率f1表示0，频率f2表示1c、调相(PM)：初相位0度表示0，初相位180度表示1d、混合调制：同时调制相位和振幅    例：正交振幅调制QAM：共12种相位，每个相位有1或2个振幅，共可调制16种波形(码元)，每种码元可表示4bit，对应关系采用格雷码(相邻码元只有1bit不同)</code></pre><h2 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h2><h4 id="1、码间串扰：信号波形失去了码元之间的清晰界限，输出端无法判断该信号何时为-1、何时为-0，造成失真现象。"><a href="#1、码间串扰：信号波形失去了码元之间的清晰界限，输出端无法判断该信号何时为-1、何时为-0，造成失真现象。" class="headerlink" title="1、码间串扰：信号波形失去了码元之间的清晰界限，输出端无法判断该信号何时为 1、何时为 0，造成失真现象。"></a>1、码间串扰：信号波形失去了码元之间的清晰界限，输出端无法判断该信号何时为 1、何时为 0，造成失真现象。</h4><pre><code>失真因素：码元传输速率、信号传输距离、噪声干扰、传输媒体质量</code></pre><h4 id="2、奈氏准则：在假定的理想条件下，为避免码元间的串扰，码元传输速率是有上限的"><a href="#2、奈氏准则：在假定的理想条件下，为避免码元间的串扰，码元传输速率是有上限的" class="headerlink" title="2、奈氏准则：在假定的理想条件下，为避免码元间的串扰，码元传输速率是有上限的"></a>2、奈氏准则：在假定的理想条件下，为避免码元间的串扰，码元传输速率是有上限的</h4><pre><code>理想低通信道的最高码元传输速率=2W Baud=2W 码元/秒理想带通信道的最高码元传输速率=W Baud=W 码元/秒W：信道带宽(单位为Hz)Baud：波特，即码元/秒码元传输速率又称波特率，与比特率的关系视一码元能携带的比特数量而定。要提高信息传输速率(比特率)，就要使一个码元能携带更多个比特的信息量，即采用多元制。实际的信道所能传输的最高码元速率要远远低于奈氏准则给出的上限值。</code></pre><h4 id="3、香农公式：带宽受限且有高斯白噪声干扰的信道的极限信息传输速率-c-W-log2-1-S-N"><a href="#3、香农公式：带宽受限且有高斯白噪声干扰的信道的极限信息传输速率-c-W-log2-1-S-N" class="headerlink" title="3、香农公式：带宽受限且有高斯白噪声干扰的信道的极限信息传输速率 c&#x3D;W*log2(1+S&#x2F;N)"></a>3、香农公式：带宽受限且有高斯白噪声干扰的信道的极限信息传输速率 c&#x3D;W*log2(1+S&#x2F;N)</h4><pre><code>c：信道的极限信息传输速率(单位：b/s)W：信道带宽(单位为Hz)S：信道内所传信号的平均功率N：信道内的高斯噪声功率S/N：信噪比，使用分贝(dB)作为度量单位    信噪比(dB)=10*log10(S/N)（dB）信道带宽或信道中信噪比越大，信息的极限传输速率就越高。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Learning Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概述</title>
      <link href="/2025/02/22/%E6%A6%82%E8%BF%B0/"/>
      <url>/2025/02/22/%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="因特网概述"><a href="#因特网概述" class="headerlink" title=" 因特网概述"></a><center> 因特网概述</h1><h2 id="网络-Network-：由若干个节点-node-和链接这些节点的链路-Link-组成。"><a href="#网络-Network-：由若干个节点-node-和链接这些节点的链路-Link-组成。" class="headerlink" title="网络(Network)：由若干个节点(node)和链接这些节点的链路(Link)组成。"></a>网络(Network)：由若干个节点(node)和链接这些节点的链路(Link)组成。</h2><pre><code>多个网络通过路由器互联，构成互联网。</code></pre><h4 id="internet-与-Internet"><a href="#internet-与-Internet" class="headerlink" title="internet 与 Internet"></a>internet 与 Internet</h4><pre><code>internet泛指计算机网络，这些网络的通信协议可以是任意的；Internet为专用名词，特指当前全球最大的、最开放的、由众多网络互相连接而成的特定计算机网络，采用TCP/IP协议族作为通信规则，其前身为美国的ARPANET。</code></pre><span id="more"></span><h4 id="因特网发展的三个阶段"><a href="#因特网发展的三个阶段" class="headerlink" title="因特网发展的三个阶段"></a>因特网发展的三个阶段</h4><pre><code>1、1969年：从单个网络ARPANT向互联网发展    1969年，第一个分组交换网ARPANT    1983年，TCP/IP协议成为ARPANT的标准协议(标志着因特网诞生)2、1985年：NSF围绕大型计算机中心建设NSFNET(主干网、地区网和校园网)3、1993年：逐步形成多层次ISP结构的因特网    1993年，NSFNET逐渐被若干个商用因特网主干网替代，由因特网服务提供者ISP来运营。    1994年，万维网www技术使因特网迅猛发展    1995年，NSFNET停运，因特网彻底商业化</code></pre><h2 id="因特网服务提供者-ISP-Internet-Service-Provider"><a href="#因特网服务提供者-ISP-Internet-Service-Provider" class="headerlink" title="因特网服务提供者 ISP(Internet Service Provider)"></a>因特网服务提供者 ISP(Internet Service Provider)</h2><pre><code>ISP从因特网管理机构申请成块的IP地址，拥有通信线路及路由器等联网设备，个人通过缴纳一定的费用，可从ISP得到所需的IP地址</code></pre><h4 id="基于-ISP-三层结构"><a href="#基于-ISP-三层结构" class="headerlink" title="基于 ISP 三层结构"></a>基于 ISP 三层结构</h4><pre><code>1、国际性区域/主干网：第一层ISP，相互连接2、区域性或国家性覆盖规模：第二层ISP/大公司，与少数第一层ISP相连接3、本地范围：本地ISP，第二层ISP的用户，校园网/企业网/住宅用户/无线移动用户均为本地ISP的用户</code></pre><h2 id="因特网标准化工作"><a href="#因特网标准化工作" class="headerlink" title="因特网标准化工作"></a>因特网标准化工作</h2><pre><code>因特网协会ISOC：负责对因特网的全面管理因特网体系结构委员会IAB：负责有关协议 的开发因特网工程部IETF：负责研究中短期工程问题，主要针对协议的开发和标准化因特网研究部IRTF：从事理论研究和长期问题的开发</code></pre><h4 id="制定因特网正式标准的-4-个阶段"><a href="#制定因特网正式标准的-4-个阶段" class="headerlink" title="制定因特网正式标准的 4 个阶段"></a>制定因特网正式标准的 4 个阶段</h4><pre><code>1、因特网草案(这个阶段还不是RFC文档)2、建议标准(开始成为RFC文档)3、草案标准4、因特网标准</code></pre><h2 id="因特网组成"><a href="#因特网组成" class="headerlink" title="因特网组成"></a>因特网组成</h2><pre><code>1、边缘部分：所有链接在因特网上的主机，由用户直接使用，用来进行通信和资源共享2、核心部分：由大量网络和链接这些网络的路由器组成，为边缘部分提供服务(提供连通性和交换)</code></pre><h2 id="三种交换方式"><a href="#三种交换方式" class="headerlink" title="三种交换方式"></a>三种交换方式</h2><h4 id="1、电路交换：通过电话交换机接通电话线的方式进行链接。"><a href="#1、电路交换：通过电话交换机接通电话线的方式进行链接。" class="headerlink" title="1、电路交换：通过电话交换机接通电话线的方式进行链接。"></a>1、电路交换：通过电话交换机接通电话线的方式进行链接。</h4><pre><code>三个步骤：    a、建立链接(分配通信资源)    b、通话(长时间占用通信资源)    c、释放链接(归还通讯资源)优点：    1、由于通信线路为通信双方用户专用，数据直达，所以传输数据的时延非常小。    2、通信双方之间的物理通路一旦建立，双方可以随时通信，实时性强，没有冲突。    3、双方通信时按发送顺序传送数据，不存在失序问题。    4、电路交换既适用于传输模拟信号，也适用于传输数字信号。    5、电路交换的交换设备（交换机等）及控制均较简单。缺点：    1、电路交换时，数据直达，不同类型、不同规格、不同速率的终端很难相互进行通信，也难以在通信过程中进行差错控制。    2、电路交换的平均连接建立时间对计算机通信来说嫌长。    3、电路交换连接建立后，物理通路被通信双方独占，即使通信线路空闲，也不能供其他用户使用，因而信道利用低。    4、交换数据时，其线路的传输效率往往很低。这是因为计算机数据是突发式地出现在传输线路上的，传输数据的时间往往不到10%甚至1%</code></pre><h4 id="2、报文交换：基于存储转发的原理，将整个报文一起发送出去，路由器需要存储的数据量较大"><a href="#2、报文交换：基于存储转发的原理，将整个报文一起发送出去，路由器需要存储的数据量较大" class="headerlink" title="2、报文交换：基于存储转发的原理，将整个报文一起发送出去，路由器需要存储的数据量较大"></a>2、报文交换：基于存储转发的原理，将整个报文一起发送出去，路由器需要存储的数据量较大</h4><pre><code>优点：    a.在报文交换中便于设置代码检验和数据重发设施，加之交换结点还具有路径选择，就可以做到某条传输路径发生故障时，重新选择另一条路径传输数据，提高了传输的可靠性；    b.在存储转发中容易实现代码转换和速率匹配，甚至收发双方可以不同时处于可用状态。这样就便于类型、规格和速度不同的计算机之间进行通信；    c.提供多目标服务，即一个报文可以同时发送到多个目的地址，这在电路交换中是很难实现的；    d.允许建立数据传输的优先级，使优先级高的报文优先转换。    通信双方不是固定占有一条通信线路，而是在不同的时间一段一段地部分占有这条物理通路，因而大大提高了通信线路的利用率。缺点：    1、由于数据进入交换结点后要经历存储、转发这一过程，从而引起转发时延（包括接收报文、检验正确性、排队、发送时间等），而且网络的通信量愈大，造成的时延就愈大，因此报文交换的实时性差，不适合传送实时或交互式业务的数据。    2、报文交换只适用于数字信号。    3、由于报文长度没有限制，而每个中间结点都要完整地接收传来的整个报文，当输出线路不空闲时，还可能要存储几个完整报文等待转发，要求网络中每个结点有较大的缓冲区。为了降低成本，减少结点的缓冲存储器的容量，有时要把等待转发的报文存在磁盘上，进一步增加了传送时延。</code></pre><h4 id="3、分组交换：采用存储转发技术，将报文分为一个个更小等长的数据段，在这些数据段前面加上必要的控制信息-发送-IP、目的-IP-等-组成的首部后构成一个分组，又称“包”，分组的首部又称为“包头”。在分组交换中为用户进行信息处理，路由器进行分组的存储和转发。"><a href="#3、分组交换：采用存储转发技术，将报文分为一个个更小等长的数据段，在这些数据段前面加上必要的控制信息-发送-IP、目的-IP-等-组成的首部后构成一个分组，又称“包”，分组的首部又称为“包头”。在分组交换中为用户进行信息处理，路由器进行分组的存储和转发。" class="headerlink" title="3、分组交换：采用存储转发技术，将报文分为一个个更小等长的数据段，在这些数据段前面加上必要的控制信息(发送 IP、目的 IP 等)组成的首部后构成一个分组，又称“包”，分组的首部又称为“包头”。在分组交换中为用户进行信息处理，路由器进行分组的存储和转发。"></a>3、分组交换：采用存储转发技术，将报文分为一个个更小等长的数据段，在这些数据段前面加上必要的控制信息(发送 IP、目的 IP 等)组成的首部后构成一个分组，又称“包”，分组的首部又称为“包头”。在分组交换中为用户进行信息处理，路由器进行分组的存储和转发。</h4><pre><code>优点：1、高效。在分组传输的过程中动态分配传输宽带，对通信链路是逐段占用。2、灵活。为每一个分组独立的选择最合适的转发路由。3、迅速。以分组作为传送单位，可以不先建立连接，就能像其他主机发送分组。4、可靠。保证可靠性的网络协议；分布式多路由的分组交换网，使网络有很好的生存性缺点：1、尽管分组交换比报文交换的传输时延少，但仍存在存储转发时延，而且其结点交换机必须具有更强的处理能力。2、分组交换与报文交换一样，每个分组都要加上源、目的地址和分组编号等信息，使传送的信息量大约增大5%～10%，一定程度上降低了通信效率，增加了处理的时间，使控制复杂，时延增加。3、当分组交换采用数据报服务时，可能出现失序、丢失或重复分组，分组到达目的结点时，要对分组按编号进行排序等工作，增加了麻烦。若采用虚电路服务，虽无失序问题，但有呼叫建立、数据传输和虚电路释放三个过程。</code></pre><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h4 id="简单定义：一些互联的、自治的计算机集合"><a href="#简单定义：一些互联的、自治的计算机集合" class="headerlink" title="简单定义：一些互联的、自治的计算机集合"></a>简单定义：一些互联的、自治的计算机集合</h4><h4 id="较好定义：由一些通用的、可编程的硬件互联而成，这些硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用"><a href="#较好定义：由一些通用的、可编程的硬件互联而成，这些硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用" class="headerlink" title="较好定义：由一些通用的、可编程的硬件互联而成，这些硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用"></a>较好定义：由一些通用的、可编程的硬件互联而成，这些硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用</h4><h4 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h4><h6 id="1、按交换技术"><a href="#1、按交换技术" class="headerlink" title="1、按交换技术"></a>1、按交换技术</h6><pre><code>a、电路交换网络b、报文交换网络c、分组交换网络</code></pre><h6 id="2、按覆盖范围"><a href="#2、按覆盖范围" class="headerlink" title="2、按覆盖范围"></a>2、按覆盖范围</h6><pre><code>a、广域网WAN：几十公里到几千公里，因特网的核心部分b、城域网MAN：5到50公里，城市骨干网c、局域网LAN：1公里左右d、个域网PAN：个人区域网络，不同于上述网络链接不同计算机，个域网链接个人使用的电子设备</code></pre><h6 id="3、按使用者"><a href="#3、按使用者" class="headerlink" title="3、按使用者"></a>3、按使用者</h6><pre><code>a、公用网b、专用网</code></pre><h6 id="4、按传输介质"><a href="#4、按传输介质" class="headerlink" title="4、按传输介质"></a>4、按传输介质</h6><pre><code>a、有线网络b、无线网络</code></pre><h6 id="5、按拓扑结构"><a href="#5、按拓扑结构" class="headerlink" title="5、按拓扑结构"></a>5、按拓扑结构</h6><pre><code>a、总线型网络b、星型网络c、环形网络d、网状型网络</code></pre><h2 id="网络性能指标"><a href="#网络性能指标" class="headerlink" title="网络性能指标"></a>网络性能指标</h2><h4 id="1、速率：在数字通道上传送比特的速率，也称为比特率或数据率"><a href="#1、速率：在数字通道上传送比特的速率，也称为比特率或数据率" class="headerlink" title="1、速率：在数字通道上传送比特的速率，也称为比特率或数据率"></a>1、速率：在数字通道上传送比特的速率，也称为比特率或数据率</h4><pre><code>常用单位：bit/s，kb/s=10^3b/s,Mb/s=10^3kb/s=10^6b/s</code></pre><h4 id="2、带宽：表示网络的通信线路所能传送数据的能力，单位时间内从一点到达另一点所能通过的最高数据率"><a href="#2、带宽：表示网络的通信线路所能传送数据的能力，单位时间内从一点到达另一点所能通过的最高数据率" class="headerlink" title="2、带宽：表示网络的通信线路所能传送数据的能力，单位时间内从一点到达另一点所能通过的最高数据率"></a>2、带宽：表示网络的通信线路所能传送数据的能力，单位时间内从一点到达另一点所能通过的最高数据率</h4><pre><code>单位：b/s，kb/s，Mb/s，Gb/s，Tb/s</code></pre><h4 id="3、吞吐量：单位时间内通过某个网络-信道或接口-的数据量"><a href="#3、吞吐量：单位时间内通过某个网络-信道或接口-的数据量" class="headerlink" title="3、吞吐量：单位时间内通过某个网络(信道或接口)的数据量"></a>3、吞吐量：单位时间内通过某个网络(信道或接口)的数据量</h4><pre><code>吞吐量受网络带宽或额定速率的限制</code></pre><h4 id="4、时延：源主机传送数据到目的主机之间产生的时间延迟"><a href="#4、时延：源主机传送数据到目的主机之间产生的时间延迟" class="headerlink" title="4、时延：源主机传送数据到目的主机之间产生的时间延迟"></a>4、时延：源主机传送数据到目的主机之间产生的时间延迟</h4><pre><code>a、发送时延：数据由源主机发往网络的时延    发送时延=分组长度(b)/发送速率(b/s)    发送速率由网卡发送速率、信道带宽、接口速率中最小的决定b、传播时延：数据在网络线路中传播的延迟    传播时延=信道长度(m)/电磁波传播速率(m/s)        在真空速率为3*10^8m/s        在铜线中的速率为2.3*10^8m/s        在光纤中的速率为2.0*10^8m/sc、处理时延(包含排队时延和处理时延)：路由器存储转发的时延，不便计算d、计算：    若分组等长，各链路长度相同，带宽相同，忽略处理器的处理时延；共n个分组，m段链路，    则总时延=n个分组的发送时延+(m-1)*1个分组的发送时延+m*一段链路的传播时延    (路由器接收下一个分组时可转发当前分组)</code></pre><h4 id="5、时延带宽积：以比特为单位的链路长度"><a href="#5、时延带宽积：以比特为单位的链路长度" class="headerlink" title="5、时延带宽积：以比特为单位的链路长度"></a>5、时延带宽积：以比特为单位的链路长度</h4><pre><code>时延带宽积=传播时延*带宽</code></pre><h4 id="6、往返时间-RTT-Round-Trip-Time-：从源主机发送分组开始到源主机收到目的主机的确认分组为止经过的时间"><a href="#6、往返时间-RTT-Round-Trip-Time-：从源主机发送分组开始到源主机收到目的主机的确认分组为止经过的时间" class="headerlink" title="6、往返时间 RTT(Round-Trip Time)：从源主机发送分组开始到源主机收到目的主机的确认分组为止经过的时间"></a>6、往返时间 RTT(Round-Trip Time)：从源主机发送分组开始到源主机收到目的主机的确认分组为止经过的时间</h4><h4 id="7、利用率"><a href="#7、利用率" class="headerlink" title="7、利用率"></a>7、利用率</h4><pre><code>a、信道利用率：用来表示某信道有百分之几的时间是有数据通过的    信道利用率并非越高越好，信道利用率增大时会使时延迅速增大    网络空闲时的时延=网络当前时延*未利用率b、网络利用率：全网络信道利用率的加权平均</code></pre><h4 id="8、丢包率：在一定时间范围内，传输过程中丢失的分组数量与总分组数量的比率"><a href="#8、丢包率：在一定时间范围内，传输过程中丢失的分组数量与总分组数量的比率" class="headerlink" title="8、丢包率：在一定时间范围内，传输过程中丢失的分组数量与总分组数量的比率"></a>8、丢包率：在一定时间范围内，传输过程中丢失的分组数量与总分组数量的比率</h4><pre><code>丢包率可具体分为接口丢包率、结点丢包率、链路丢包率、路径丢包率、网络丢包率等分组丢失的两种情况：    a、分组在传输过程中出现误码，被结点丢弃    b、分组到达一台队列已满的分组交换机时被丢弃，在通信量较大时造成网络拥塞</code></pre><h2 id="计算机网络体系"><a href="#计算机网络体系" class="headerlink" title="计算机网络体系"></a>计算机网络体系</h2><h4 id="1、OSI-体系结构：法律上的国际标准"><a href="#1、OSI-体系结构：法律上的国际标准" class="headerlink" title="1、OSI 体系结构：法律上的国际标准"></a>1、OSI 体系结构：法律上的国际标准</h4><pre><code>1、物理层 2、数据链路层 3、网络层 4、运输层5、会话层：解决进程之间进行会话的问题6、表示层：解决通信双方交换信息的表示问题7、应用层</code></pre><h4 id="2、TCP-IP-体系结构：事实上的国际标准，相比-OSI-体系减少了会话层和表示层"><a href="#2、TCP-IP-体系结构：事实上的国际标准，相比-OSI-体系减少了会话层和表示层" class="headerlink" title="2、TCP&#x2F;IP 体系结构：事实上的国际标准，相比 OSI 体系减少了会话层和表示层"></a>2、TCP&#x2F;IP 体系结构：事实上的国际标准，相比 OSI 体系减少了会话层和表示层</h4><pre><code>1、网络接口层：包含OSI体系中的物理层和数据链路层；链接各个类型的网络接口2、网际层：即网络层，包含IP协议(网际协议)3、运输层：包含TCP、UDP协议4、应用层：包含HTTP、SMTP、DNS、RTP等协议</code></pre><h4 id="3、原理体系结构"><a href="#3、原理体系结构" class="headerlink" title="3、原理体系结构"></a>3、原理体系结构</h4><pre><code>1、物理层：解决使用何种信号来传输比特的问题；2、数据链路层：解决分组在一个网络或一段链路上传输的问题；3、网络层：解决分组在多个网络上传输(路由)的问题；4、运输层：解决进程之间基于网络的通信问题；5、应用层：解决通过应用进程之间的交互来实现特定网络应用的问题</code></pre><h4 id="4、专用术语"><a href="#4、专用术语" class="headerlink" title="4、专用术语"></a>4、专用术语</h4><h6 id="a、实体"><a href="#a、实体" class="headerlink" title="a、实体"></a>a、实体</h6><pre><code>1、实体：任何可发送或接收信息的硬件或软件进程2、对等实体：收发双方相同层次中的实体</code></pre><h6 id="b、协议"><a href="#b、协议" class="headerlink" title="b、协议"></a>b、协议</h6><pre><code>1、协议：控制两个对等实体进行逻辑通信的规则的集合，是“水平”的2、协议三要素：    a、语法：定义所交换信息的格式    b、语义：定义收发双方所要完成的操作    c、同步：定义收发双方的时序关系</code></pre><h6 id="c、服务"><a href="#c、服务" class="headerlink" title="c、服务"></a>c、服务</h6><pre><code>1、服务：在协议的控制下两个对等实体间的逻辑通信使得本层能够向上一层提供服务；要实现本层协议还需要使用下一层提供的服务；下层协议对上层实体是透明的；服务是“垂直”的2、服务访问点：在同一系统中相邻两层的实体交换信息的逻辑接口，用于区分不同服务类型    例：数据链路层的服务访问点为帧的“类型”字段、网络层的服务访问点为IP数据报首部中的“协议字段”、运输层的服务访问点为“端口号”3、服务原语：上层使用下层提供的服务必须与下层交换的一些命令4、协议数据单元PDU：对等层次之间传送的数据包称为该层的协议数据单元5、服务数据单元SDU：同一系统内，层与层之间交换的数据包称为服务数据单元    多个SDU可以合成为一个PDU；一个PDU也可以划分为多个SDU</code></pre>]]></content>
      
      
      <categories>
          
          <category> Learning Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NUKITASHI</title>
      <link href="/2025/02/21/NUKITASHI/"/>
      <url>/2025/02/21/NUKITASHI/</url>
      
        <content type="html"><![CDATA[<h1 id="NUKITASHI-拔作岛-——并非拔作的剧情向"><a href="#NUKITASHI-拔作岛-——并非拔作的剧情向" class="headerlink" title=" NUKITASHI(拔作岛)——并非拔作的剧情向"></a><center> NUKITASHI(拔作岛)——并非拔作的剧情向</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 以我个人来说，比起甜甜的废萌，有一定深度剧情的作品更能吸引我。而本作拔作岛，如其名，初见可能以为是为了搞颜色而搞颜色，但游玩下来你会发现，这是一个面对社会舆论的压力，一个普通人如何抉择的故事。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本作的故事背景为一个远离日本本土的岛屿青蓝岛上，这个岛屿实施了名为“变态条例”的法律来振兴经济，以可以自由进行性产活动来吸引本土的居民来岛游览或定居。由于多年的实施，岛上的居民已将性产行为视为一件日常活动，并设有监督组织 SHO 及其下属学生组织 FS 监督条例的实施，若有人违反条例会被实施强制 play（。而本作的主角橘淳之介和妹妹麻沙音，就是在这样的条件下回到了故乡的岛屿。在选择支之前，故事前期基本围绕主角作为一个“少数派”，如何躲避变态条例并在此过程中逐渐增加同伴，此间频繁暗示主角拥有可以“征服”岛屿的能力，而这个能力也让他有一个不愿回首的过去。<br><img src="/../images/QQ20250203-233512.png" alt="NUKITASHI"></p><span id="more"></span><h4 id="奈奈濑线——面对压迫抗争到底"><a href="#奈奈濑线——面对压迫抗争到底" class="headerlink" title="奈奈濑线——面对压迫抗争到底"></a><font color=orange>奈奈濑线——面对压迫抗争到底</font></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这是我玩的第一条线，绝不是因为 nanase 好看（<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 总的来说 nanase 线是最平庸的，徒有天降青梅辣妹婊子开局最高好感度角色，结局只是反抗成功一起包饺子，同时该线的信息量也是最少的，本作三大势力只展示了两个，黑帮势力似乎只在一些细节对话中出现。不过话又说回来了，一个家务全能做饭好吃还十分懂你、利落帅气的美少女很难不喜欢的好吧，最重要的是 nanase 的泪痣真戳我吧（<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 我永远喜欢 nanase（大声<br><img src="/../images/QQ20250203-232049.png" alt="nanase"></p><h4 id="雏见线——不同理念的碰撞"><a href="#雏见线——不同理念的碰撞" class="headerlink" title="雏见线——不同理念的碰撞"></a><font color= #FFCCE5>雏见线——不同理念的碰撞</font></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;萝莉前辈这个萌点不在我的好球区(雏见音：ロリじゃないですけど)，该线最吸引我的反而是 FS 三巨头的队长礼。同样是从小受到欺凌而对变态条例没有好感，但礼被雏见拯救后迫于生计，压抑自己加入了维护条例的组织，面对来自社会的胁迫选择了顺从。该线还有紧张刺激的卧底桥段，男主玩着玩着感觉快变成真正的 FS 了（</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这桥段好眼熟啊，原来是你莱纳（<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;萝莉前辈的塑造也很有趣，平常像真正的小孩子一样天真，但总能在重要的关头一语成谶。打完这条线，最想看的居然是他们 3p（<br><img src="/../images/QQ20250203-232428.png" alt="hinami"></p><h4 id="美岬线——每一个人都是具体的"><a href="#美岬线——每一个人都是具体的" class="headerlink" title="美岬线——每一个人都是具体的"></a><font color= purple>美岬线——每一个人都是具体的</font></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;初见这个透明人胖子没什么亮点，但后续的展开太变态了，什么交通工具都能开、插满假 jb 的痛车，最难绷的是每次打开作战协议总让我忍不住来一句“我测，二刺螈”</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;美岬作为岛上的原住民，自小受到变态条例的熏陶，使其和主角对性的看法一开始是有分歧的。随着淳之介对她影响的增大，美岬的观念也逐渐回归“正常”；而淳之介也受到岛上居民的种种帮助，观念逐渐发生变化。他是恨着岛上的居民的，这个恨的对象是岛民这个群体，但对一个个具体的岛民，他是恨不起来的。<br>同样的，该线的 FS 三巨头女部田的描写也很足。往日冷艳坚毅的女部田在失去了同伴之后，也像条被丢弃的小狗一般失去了归宿，等待淳之介将其捡回，而淳之介会帮助昔日的敌人也正是其观念的转变。人都是矛盾的，是不可一概而论的。<br><img src="/../images/QQ20250203-232858.png" alt="misaki"></p><h4 id="文乃线——True-End"><a href="#文乃线——True-End" class="headerlink" title="文乃线——True End"></a><font color=#FF4D8F>文乃线——True End</font></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在走完前面三个结局后，会解锁新的选项，进入真结局。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文乃线作为本作的真结局，给我的感觉更像是将前三条线杂糅起来。将去 FS 训练的经历塞入，续写 nanase 线的结尾。总的来说这条线给我震撼没有雏见线那么大，我看到的更多是一个小女孩企图将父辈的罪恶一人揽下。插一句，文乃每次出场的 bgm 非常有特色，感觉不是这个片场的一样（<br>该线道出的主旨或者说本作的主旨：和而不同。人是复杂的，不可能要求每一个人对待同一件事都有相同的看法，本作描绘的正是对待性这一行为多数派与少数派之间的矛盾。故事的最后，曾经强制执行性产行为的青蓝岛将对性的选择权交还到了民众手中，正视了“性少数”的选择。<br><img src="/../images/QQ20250203-233052.png" alt="ayahumi"><br>后记：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在是 2025 年的寒假，本来看缘某空要上架 steam 想入一手正版，回家一看怎么延期了 😡；再一看拔作岛也打折了，久闻大名便来体验一番。本人玩的 galgame 不多，上上一个玩的是《白 2》，除了雪菜 true 全线通关（没错我就是和纱党），上一个玩完的是《女仆咖啡帕露菲》，本来冲着丸户史明的脚本去的，打完感觉有点差强人意。所以本作入手之前绝对不是冲着名字来的（<br>刚开始游玩还被开幕的满屏性*震撼到，忘不了麻沙音酱的高速神言，怎么有这么可爱的一抹多。整体玩下来的感受是有趣，能让我有沉浸在故事中的感觉，让人想知道后续的发展，即使不是那么高深的探讨，但能把一定程度上的讨论和鬼畜的设定结合起来，实属佳作。不过不得不说，本作 FS 三巨头描写的都挺有魅力的，很难不怀疑出一代的时候就把续作剧本想好了（</p><p>2 月 21 号凌晨补：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本作原本 2 月初就已通关，本篇是想先发在 b 站来着，狗日的处男审核有什么过不了审的 😡😡😡</p><p>注：本文全为个人游玩感想，若有不同意见欢迎讨论</p>]]></content>
      
      
      <categories>
          
          <category> galgame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nukitashi </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
